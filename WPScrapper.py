import base64
import sys

ENCRYPTED_CODE = """
#!/usr/bin/env python3
# Mass Wordpress Scrapper - Developed by RedHydra
# An advanced discovery tool with a concurrent dork and subdomain scanning engine.
# Compatible with Windows and Linux

import os
import sys
import json
import time
import queue
import random
import asyncio
import threading
import traceback
import webbrowser
import re
import html
import base64
from hashlib import sha256
from urllib.parse import urlparse, quote, urljoin
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple, Set
import platform
import subprocess
import logging

# Suppress aiohttp warnings
logging.getLogger("aiohttp").setLevel(logging.ERROR)

# Fix for Linux environment variables when running as root
if platform.system() == "Linux":
    # Set XDG_RUNTIME_DIR if not set
    if 'XDG_RUNTIME_DIR' not in os.environ:
        runtime_dir = '/tmp/runtime-root'
        os.environ['XDG_RUNTIME_DIR'] = runtime_dir
        try:
            os.makedirs(runtime_dir, exist_ok=True)
            os.chmod(runtime_dir, 0o700)
            print(f"[INFO] XDG_RUNTIME_DIR set to {runtime_dir}")
        except Exception as e:
            print(f"[WARNING] Could not set XDG_RUNTIME_DIR: {e}")
    
    # Set DISPLAY if not set
    if 'DISPLAY' not in os.environ:
        os.environ['DISPLAY'] = ':0'
        print("[INFO] DISPLAY set to :0")
    
    # Try to start a virtual display if needed
    try:
        if not os.environ.get('DISPLAY') or not os.path.exists('/tmp/.X11-unix/X0'):
            print("[INFO] Starting virtual display...")
            subprocess.Popen(['Xvfb', ':0', '-screen', '0', '1280x1024x24', '-ac'])
            time.sleep(2)  # Give Xvfb time to start
    except Exception as e:
        print(f"[WARNING] Could not start virtual display: {e}")

# Required imports for Subdomain Scanner
try:
    import aiodns
    import aiohttp
except ImportError:
    print("Please install required libraries: pip install aiodns aiohttp")
    sys.exit(1)

# Required for search functionality
try:
    from ddgs import DDGS
except ImportError:
    print("Please install the required search library: pip install ddgs")
    sys.exit(1)

# Required imports for PyQt5 UI
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QGroupBox, QFormLayout, QLabel, QLineEdit, QPushButton,
                             QTextEdit, QTabWidget, QTableWidget, QTableWidgetItem,
                             QCheckBox, QSpinBox, QComboBox, QFileDialog, QMessageBox,
                             QProgressBar, QScrollArea, QSplitter, QToolTip, QFrame,
                             QSizePolicy, QHeaderView, QAbstractItemView, QStatusBar,
                             QToolButton, QStyle, QMenu, QAction, QGraphicsDropShadowEffect)
from PyQt5.QtCore import (QObject, pyqtSignal, QThread, QEventLoop, QTimer, Qt)
from PyQt5.QtGui import (QFont, QPalette, QColor, QBrush, QLinearGradient, QIcon,
                         QCursor, QIntValidator, QDoubleValidator, QFontMetrics,
                         QKeySequence, QClipboard, QTextCursor, QPixmap)

# Required imports for colored console output
from colorama import init, Fore

# Required for AI features
try:
    import google.generativeai as genai
except ImportError:
    genai = None

# Initialize colorama for cross-platform colored output
init(autoreset=True)

class RateLimiter:
    """A simple rate limiter to avoid overwhelming services."""
    def __init__(self, requests_per_period: int, period_seconds: int):
        self.requests_per_period = requests_per_period
        self.period_seconds = period_seconds
        self.request_timestamps = []
        self.lock = threading.Lock()

    async def wait(self):
        """Waits if necessary to respect the rate limit."""
        with self.lock:
            now = time.monotonic()
            self.request_timestamps = [t for t in self.request_timestamps if now - t < self.period_seconds]
            
            if len(self.request_timestamps) >= self.requests_per_period:
                wait_time = self.period_seconds - (now - self.request_timestamps[0])
                if wait_time > 0:
                    await asyncio.sleep(wait_time)
            
            self.request_timestamps.append(time.monotonic())


# ==================== Subdomain Scanner Integration ====================

class DnsClient:
    """Async DNS client with caching."""
    def __init__(self, timeout: float = 2.0):
        self.resolver = aiodns.DNSResolver(timeout=timeout, tries=2)
        self.cache = {}
        self.sem = asyncio.Semaphore(500)

    async def resolve_all(self, fqdn: str) -> Dict[str, Any]:
        if fqdn in self.cache: return self.cache[fqdn]
        async with self.sem:
            try:
                a_records_task = self.resolver.query(fqdn, "A")
                cname_record_task = self.resolver.query(fqdn, "CNAME")
                a_records, cname_record = await asyncio.gather(a_records_task, cname_record_task, return_exceptions=True)
                
                res = {
                    "A": [r.host for r in a_records] if not isinstance(a_records, Exception) else [],
                    "CNAME": cname_record.cname if not isinstance(cname_record, Exception) and cname_record else None
                }
            except Exception:
                res = {"A": [], "CNAME": None}
            self.cache[fqdn] = res
            return res

class HttpClient:
    """Async HTTP client for probing WordPress sites with improved error handling."""
    def __init__(self, verify_tls: bool, max_conc: int = 100):
        self.sem = asyncio.Semaphore(max_conc)
        self.timeout = aiohttp.ClientTimeout(total=10.0, connect=5.0)
        # Custom connector with better error handling
        connector = aiohttp.TCPConnector(
            ssl=verify_tls,
            force_close=True,
            enable_cleanup_closed=True,
            limit_per_host=10
        )
        # Custom headers to avoid some common issues
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        self.session = aiohttp.ClientSession(
            timeout=self.timeout, 
            trust_env=True, 
            connector=connector,
            headers=headers,
            auto_decompress=False  # Handle decompression manually
        )

    async def close(self):
        """Closes the underlying aiohttp session."""
        if self.session and not self.session.closed:
            await self.session.close()

    async def probe_host(self, host: str) -> Optional[Dict[str, Any]]:
        for scheme, port in [("https", 443), ("http", 80)]:
            url = f"{scheme}://{host}:{port}"
            try:
                async with self.sem, self.session.get(url, allow_redirects=True, ssl=False) as r:
                    # Skip empty responses and common non-content statuses
                    if r.status in [204, 304]:
                        continue
                        
                    # Handle content length
                    content_length = r.headers.get('Content-Length', '0')
                    if content_length == '0' and r.status == 200:
                        # Some servers send 200 with empty content, try to read anyway
                        pass
                    
                    # Read response with better error handling
                    try:
                        body = await r.read()
                        
                        # Handle empty body
                        if not body:
                            continue
                            
                        # Handle gzip decompression manually if needed
                        if r.headers.get('Content-Encoding') == 'gzip':
                            try:
                                import gzip
                                body = gzip.decompress(body)
                            except:
                                # If decompression fails, continue with raw body
                                pass
                        
                        if self.is_wordpress_site(body, str(r.url)):
                            return {"url": str(r.url), "title": self.extract_title(body)}
                    except Exception as e:
                        # If reading fails, continue to next scheme
                        continue
                        
            except (aiohttp.ClientError, asyncio.TimeoutError):
                continue
            except Exception:
                continue
        return None

    def is_wordpress_site(self, body: bytes, url: str) -> bool:
        try:
            # Convert to string for easier searching
            body_str = body.decode('utf-8', errors='ignore')
            return any(indicator in body_str.lower() for indicator in [
                'wp-content', 'wp-includes', 'wordpress', 'wp-json'
            ]) or any(path in url.lower() for path in ['/wp-admin', '/wp-login.php'])
        except:
            # If decoding fails, check raw bytes
            return any(indicator in body for indicator in [
                b'wp-content', b'wp-includes', b'WordPress'
            ]) or any(path in url for path in ['/wp-admin', '/wp-login.php'])

    def extract_title(self, body: bytes) -> str:
        try:
            match = re.search(rb'<title>(.*?)</title>', body, re.I | re.S)
            return html.unescape(match.group(1).decode('utf-8', 'ignore')).strip() if match else "No Title"
        except:
            return "No Title"

class GeminiSeeder:
    """Generates subdomain and dork candidates with Google Gemini."""
    def __init__(self, api_key: str, model_name: str):
        self.api_key = api_key
        self.model_name = model_name
        self._ok = False
        self._model = None
        if genai and api_key:
            try:
                genai.configure(api_key=api_key)
                self._model = genai.GenerativeModel(model_name)
                self._ok = True
            except Exception as e:
                print(f"{Fore.YELLOW}Gemini configuration failed: {e}")
        elif not genai:
            print(f"{Fore.YELLOW}Gemini disabled. `pip install google-generativeai` to enable.")

    async def generate_dorks(self, keywords: List[str], count: int = 50) -> Set[str]:
        if not self._ok: return set()
        keyword_str = ", ".join(keywords)
        prompt = (f"You are a cybersecurity expert. Generate {count} creative Google Dorks to find WordPress websites "
                  f"related to these keywords: '{keyword_str}'. Combine operators like inurl:, intitle:, etc. "
                  f"Return ONLY a flat, newline-separated list of the full dork strings.")
        
        def _run():
            try:
                resp = self._model.generate_content(prompt, request_options={'timeout': 20})
                return {dork.strip() for dork in getattr(resp, "text", "").splitlines() if dork.strip()}
            except Exception as e:
                print(f"{Fore.RED}Gemini dork generation error: {e}")
                return set()
        return await asyncio.to_thread(_run)

class SubdomainScanner:
    """Scanner for discovering WordPress sites across subdomains using multiple methods."""
    def __init__(self, config):
        self.config = config

    async def discover_wordpress_subdomains(self, domain: str, http_client: HttpClient, log_batch: list, lock: asyncio.Lock):
        """Finds subdomains using multiple methods and probes them for WordPress."""
        found_subdomains = set()
        
        # Method 1: crt.sh
        try:
            url = f"https://crt.sh/?q=%.{domain}&output=json"
            async with http_client.session.get(url, timeout=20) as response:
                if response.status == 200:
                    data = await response.json(content_type=None)
                    for entry in data:
                        name_value = entry.get('name_value', '')
                        subdomains = name_value.split('\n')
                        for sub in subdomains:
                            clean_sub = sub.strip().lower()
                            if clean_sub.endswith(f'.{domain}') and '*' not in clean_sub:
                                found_subdomains.add(clean_sub)
        except Exception as e:
            async with lock:
                log_batch.append(f"[DIAGNOSTIC] crt.sh query for {domain} failed: {repr(e)}. Using fallback methods.")

        # Method 2: Expanded base seeds
        base_seeds = {
            "www", "blog", "shop", "news", "store", "portal", "dev", "staging",
            "api", "app", "admin", "cdn", "mail", "ftp", "test", "backup", "web",
            "webmail", "secure", "mobile", "m", "stage", "uat", "demo", "temp", 
            "beta", "alpha", "cloud", "files", "media", "images", "img", "static",
            "assets", "content", "docs", "support", "help", "forum", "community",
            "members", "user", "users", "login", "signin", "register", "signup", 
            "auth", "payment", "payments", "checkout", "cart", "order", "orders", 
            "account", "accounts", "profile", "dashboard", "cpanel", "panel", "wp", 
            "wp-admin", "cms", "backend", "back", "front", "frontend", "site", "sites", 
            "data", "db", "database", "sql", "mysql", "postgres", "redis", "cache", 
            "search", "elastic", "log", "logs", "monitor", "monitoring", "stats", 
            "analytics", "tracking", "report", "reports", "api2", "app2", "v2", "v3", 
            "version2", "version3", "new", "old", "legacy", "archive", "backup2", 
            "backup3", "staging2", "dev2", "dev3", "test2", "test3", "temp2", "temp3", 
            "beta2", "beta3", "alpha2", "alpha3", "gamma", "delta", "epsilon", "zeta", 
            "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", 
            "pi", "rho", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega"
        }
        
        for seed in base_seeds:
            found_subdomains.add(f"{seed}.{domain}")

        # Method 3: Common WordPress-related subdomains
        wp_seeds = {
            "wp", "wp-admin", "wp-login", "wp-content", "wp-includes", "wp-json",
            "wordpress", "wp1", "wp2", "wp3", "wp4", "wp5", "wp6", "wp7", "wp8", "wp9",
            "wptest", "wpdev", "wpstage", "wplive", "wptemp", "wpdemo", "wpuat",
            "wpbeta", "wpalpha", "wpgamma", "wpprod", "wpproduction", "wpsandbox"
        }
        
        for seed in wp_seeds:
            found_subdomains.add(f"{seed}.{domain}")

        # Method 4: Common subdomain enumeration patterns
        patterns = [
            "{domain}-{tld}", "www.{domain}", "mail.{domain}", "ftp.{domain}",
            "localhost.{domain}", "webmail.{domain}", "smtp.{domain}", "pop.{domain}",
            "ns1.{domain}", "ns2.{domain}", "dns.{domain}", "host.{domain}"
        ]
        
        tld = domain.split('.')[-1]
        base_domain = domain.replace(f".{tld}", "")
        
        for pattern in patterns:
            subdomain = pattern.format(domain=base_domain, tld=tld)
            found_subdomains.add(subdomain)

        async with lock:
            log_batch.append(f"[DIAGNOSTIC] Found {len(found_subdomains)} total candidates for {domain} using multiple methods.")

        if not found_subdomains:
            return {}
        
        dns_client = DnsClient()
        tasks = [self.probe_fqdn(fqdn, dns_client, http_client) for fqdn in found_subdomains]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        return {fqdn: info for fqdn, info in results if fqdn and info}

    async def probe_fqdn(self, fqdn: str, dns_client: DnsClient, http_client: HttpClient) -> Tuple[Optional[str], Optional[Dict]]:
        """Checks if a fully-qualified domain has DNS records and hosts a WordPress site."""
        dns_info = await dns_client.resolve_all(fqdn)
        if dns_info and dns_info.get("A"):
            http_info = await http_client.probe_host(fqdn)
            if http_info:
                return fqdn, {**dns_info, **http_info}
        return None, None

# ==================== Main Application Logic ====================

class WordPressScanner:
    """Main WordPress scanner class that handles dork generation and scanning."""
    def __init__(self, config=None):
        self.config = config or self.load_default_config()
        self.rate_limiter = RateLimiter(requests_per_period=5, period_seconds=2)
        
        self.gemini_seeder = None
        if self.config.get('gemini_api_key'):
            self.gemini_seeder = GeminiSeeder(
                self.config['gemini_api_key'], 
                self.config.get('gemini_model', 'gemini-1.5-flash-latest')
            )
        
        self.discovered_urls = []
        self.discovered_domains = []
        self.subdomain_results = {}
        
        self.default_patterns = [
            'inurl:wp-content "{keyword}"', 'inurl:wp-admin "{keyword}"',
            'inurl:wp-includes "{keyword}"', 'intitle:"WordPress" "{keyword}"',
            'intext:"powered by WordPress" "{keyword}"', 'inurl:/wp-json/wp/v2/users/',
            'site:{keyword} "This site is running WordPress"',
            '"{keyword}" filetype:log inurl:wp-content/debug.log',
            'intitle:"{keyword}" + "Just another WordPress site"',
            'inurl:"/wp-content/uploads/" "{keyword}"'
        ]
        self.dorks = []
    
    def load_default_config(self) -> Dict[str, Any]:
        config_file = os.path.join("config.json")
        default_config = {
            "timeout": 10, "max_workers": 4, "debug_mode": True,
            "urls_file": os.path.join("results", "urls.txt"), 
            "domains_file": os.path.join("results", "domains.txt"),
            "subdomains_file": os.path.join("results", "subdomains.txt"),
            "subdomain_scan": True, "verify_tls": False,
            "gemini_api_key": "", "gemini_model": "gemini-1.5-flash-latest",
            "use_gemini_for_dorks": True
        }
        
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r') as f:
                    config = json.load(f)
                default_config.update(config)
            except (json.JSONDecodeError, IOError):
                return default_config
        else:
            try:
                os.makedirs("results", exist_ok=True)
                with open(config_file, 'w') as f:
                    json.dump(default_config, f, indent=4)
            except IOError:
                pass
        return default_config
    
    def generate_dorks_from_keywords(self, keywords: List[str], patterns: Optional[List[str]] = None):
        patterns = patterns or self.default_patterns
        dorks = set()
        for keyword in keywords:
            for pattern in patterns:
                dorks.add(pattern.replace("{keyword}", keyword.strip()))
        self.dorks = list(dorks)
        return self.dorks
    
    def get_base_domain(self, url_str: str) -> str:
        try:
            netloc = urlparse(url_str).netloc
            parts = netloc.split('.')
            if len(parts) > 2 and len(parts[-2]) <= 3 and len(parts[-1]) <= 3:
                return f"{parts[-3]}.{parts[-2]}.{parts[-1]}"
            if len(parts) >= 2:
                return f"{parts[-2]}.{parts[-1]}"
            return netloc
        except Exception:
            return "unknown"

    def save_results(self):
        try:
            os.makedirs("results", exist_ok=True)
            results_data = {
                "urls": sorted(list(set(self.discovered_urls))),
                "domains": sorted(list(set(self.discovered_domains))),
                "subdomains": self.subdomain_results
            }
            with open(os.path.join("results", "scan_results.json"), 'w') as f:
                json.dump(results_data, f, indent=4)
            
            for key, data_list in [("urls", self.discovered_urls), ("domains", self.discovered_domains)]:
                with open(self.config[f'{key}_file'], 'w') as f:
                    for item in sorted(list(set(data_list))):
                        f.write(f"{item}\n")

            if self.config.get('debug_mode'):
                print(f"{Fore.GREEN}Results saved successfully to 'results/' directory.")
        except IOError as e:
            if self.config.get('debug_mode'):
                print(f"{Fore.RED}Error saving results: {e}")

class WorkerSignals(QObject):
    log_message = pyqtSignal(str)
    log_messages = pyqtSignal(list)
    results_found = pyqtSignal(list)
    subdomains_found = pyqtSignal(list)
    scan_progress = pyqtSignal(int, int)
    scanning_stopped = pyqtSignal(str)
    dorks_generated = pyqtSignal(list)

class GeminiDorkWorker(QThread):
    def __init__(self, api_key, model, keywords, count):
        super().__init__()
        self.gemini_seeder = GeminiSeeder(api_key, model)
        self.keywords = keywords
        self.count = count
        self.signals = WorkerSignals()

    def run(self):
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            dorks = loop.run_until_complete(self.gemini_seeder.generate_dorks(self.keywords, self.count))
            self.signals.dorks_generated.emit(list(dorks))
        except Exception as e:
            self.signals.log_message.emit(f"[ERROR] Gemini worker failed: {e}")
        finally:
            loop.close()

class ScannerWorker(QThread):
    def __init__(self, scanner: WordPressScanner):
        super().__init__()
        self.scanner = scanner
        self.signals = WorkerSignals()
        self._running = True

    def run(self):
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        try:
            self.loop.run_until_complete(self.main())
        except Exception as e:
            self.signals.log_message.emit(f"[ERROR] An unexpected error occurred in scanner: {traceback.format_exc()}")
        finally:
            self.loop.close()
            self.signals.scanning_stopped.emit("Finished")
    
    async def main(self):
        domain_queue = asyncio.Queue()
        queued_domains = set()
        
        log_batch = []
        result_batch = []
        subdomain_batch = []
        batch_lock = asyncio.Lock()
        stop_emitter = asyncio.Event()

        consumer = asyncio.create_task(self.subdomain_scan_consumer(domain_queue, subdomain_batch, log_batch, batch_lock))
        emitter = asyncio.create_task(self.batch_emitter(log_batch, result_batch, subdomain_batch, batch_lock, stop_emitter))
        
        dork_tasks = [self.process_dork(dork, domain_queue, queued_domains, result_batch, log_batch, batch_lock) for dork in self.scanner.dorks]

        if dork_tasks:
            self.signals.log_message.emit(f"[INFO] Starting concurrent dork and subdomain scan...")
            self.signals.scan_progress.emit(0, len(dork_tasks))
            await self.run_tasks_concurrently(dork_tasks)
        
        await domain_queue.put(None)
        await consumer
        stop_emitter.set()
        await emitter

    async def batch_emitter(self, log_batch, result_batch, subdomain_batch, lock, stop_event):
        """Periodically emits batched results to the UI to prevent lag."""
        while not stop_event.is_set():
            await asyncio.sleep(1.0)
            
            logs_to_emit, results_to_emit, subdomains_to_emit = [], [], []
            async with lock:
                if log_batch: logs_to_emit = log_batch[:]; log_batch.clear()
                if result_batch: results_to_emit = result_batch[:]; result_batch.clear()
                if subdomain_batch: subdomains_to_emit = subdomain_batch[:]; subdomain_batch.clear()

            if logs_to_emit: self.signals.log_messages.emit(logs_to_emit)
            if results_to_emit: self.signals.results_found.emit(results_to_emit)
            if subdomains_to_emit: self.signals.subdomains_found.emit(subdomains_to_emit)
        
        logs_to_emit, results_to_emit, subdomains_to_emit = [], [], []
        async with lock:
            if log_batch: logs_to_emit = log_batch[:]; log_batch.clear()
            if result_batch: results_to_emit = result_batch[:]; result_batch.clear()
            if subdomain_batch: subdomains_to_emit = subdomain_batch[:]; subdomain_batch.clear()
        
        if logs_to_emit: self.signals.log_messages.emit(logs_to_emit)
        if results_to_emit: self.signals.results_found.emit(results_to_emit)
        if subdomains_to_emit: self.signals.subdomains_found.emit(subdomains_to_emit)

    async def subdomain_scan_consumer(self, domain_queue: asyncio.Queue, subdomain_batch: list, log_batch: list, lock: asyncio.Lock):
        self.signals.log_message.emit("[INFO] Subdomain scan consumer is active.")
        
        http_client = HttpClient(self.scanner.config.get('verify_tls', False))
        scan_tasks = []

        while self._running:
            try:
                domain = await asyncio.wait_for(domain_queue.get(), timeout=1.0)
                if domain is None: break
                task = asyncio.create_task(self.run_subdomain_scan(domain, http_client, subdomain_batch, log_batch, lock))
                scan_tasks.append(task)
            except asyncio.TimeoutError:
                continue
        
        if scan_tasks: await asyncio.gather(*scan_tasks)
        await http_client.close()
        
        self.signals.log_message.emit("[INFO] Subdomain scan consumer has finished.")
        
    async def run_subdomain_scan(self, domain: str, http_client: HttpClient, subdomain_batch: list, log_batch: list, lock: asyncio.Lock):
        if not self._running: return
        
        sub_scanner = SubdomainScanner(self.scanner.config)
        results = await sub_scanner.discover_wordpress_subdomains(domain, http_client, log_batch, lock)
        
        async with lock:
            if self._running and results:
                self.scanner.subdomain_results.update(results)
                for fqdn, info in results.items():
                    subdomain_batch.append((fqdn, domain, info))
            log_batch.append(f"[DIAGNOSTIC] Probe finished for {domain}. Found {len(results)} WordPress subdomains.")

    async def run_tasks_concurrently(self, tasks: List[asyncio.Task]):
        semaphore = asyncio.Semaphore(self.scanner.config.get('max_workers', 4))
        total_tasks = len(tasks)
        processed_count = 0

        async def run_with_semaphore(task):
            nonlocal processed_count
            async with semaphore:
                if not self._running: raise asyncio.CancelledError()
                await task
                processed_count += 1
                self.signals.scan_progress.emit(processed_count, total_tasks)
        
        await asyncio.gather(*[asyncio.create_task(run_with_semaphore(task)) for task in tasks], return_exceptions=True)

    async def process_dork(self, dork: str, domain_queue: asyncio.Queue, queued_domains: set, result_batch: list, log_batch: list, lock: asyncio.Lock):
        if not self._running: return
        
        await self.scanner.rate_limiter.wait()
        
        async with lock:
            log_batch.append(f"[FETCH] {dork} on DuckDuckGo")
        
        try:
            def search_ddg():
                with DDGS(timeout=self.scanner.config.get('timeout', 10)) as ddgs:
                    return [r['href'] for r in ddgs.text(dork, max_results=20)]
            
            links = await asyncio.to_thread(search_ddg)
            
            async with lock:
                if not self._running: return
                for url in links:
                    if url and ("wp-content" in url or "wp-includes" in url or "wordpress" in url):
                        if url not in self.scanner.discovered_urls:
                            self.scanner.discovered_urls.append(url)
                            base_domain = self.scanner.get_base_domain(url)
                            
                            if base_domain not in self.scanner.discovered_domains:
                                self.scanner.discovered_domains.append(base_domain)
                            
                            result_batch.append((url, base_domain))

                            if self.scanner.config.get('subdomain_scan') and base_domain not in queued_domains:
                                queued_domains.add(base_domain)
                                log_batch.append(f"[DIAGNOSTIC] Queued {base_domain} for subdomain scan.")
                                await domain_queue.put(base_domain)
        except Exception as e:
            async with lock:
                log_batch.append(f"[ERROR] Failed to process dork on DuckDuckGo: {e}")

    def stop(self):
        if self._running:
            self._running = False
            
class WordPressScannerUI(QMainWindow):
    def __init__(self, logo_pixmap=None):
        super().__init__()
        self.setWindowTitle("Mass Wordpress Scrapper")
        
        self.logo_pixmap = logo_pixmap
        self.scanner = WordPressScanner()
        self.worker = None
        
        self.create_ui()
        self.apply_dark_theme()
        self.load_settings()
        self.setup_context_menus()

    def create_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)
        
        header_frame = QFrame()
        header_layout = QHBoxLayout(header_frame)

        header_text_layout = QVBoxLayout()
        header_text_layout.setContentsMargins(0, 0, 10, 0)
        title_label = QLabel("Mass Wordpress Scrapper")
        title_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #E2E8F0;")
        desc_label = QLabel("Advanced Discovery Tool for WordPress Sites")
        desc_label.setStyleSheet("font-size: 14px; color: #A0AEC0;")
        author_label = QLabel("Developed by RedHydra")
        author_label.setStyleSheet("font-size: 11px; color: #718096;")
        
        header_text_layout.addWidget(title_label)
        header_text_layout.addWidget(desc_label)
        header_text_layout.addStretch()
        header_text_layout.addWidget(author_label)
        header_layout.addLayout(header_text_layout)
        header_layout.addStretch()
        
        if self.logo_pixmap and not self.logo_pixmap.isNull():
            logo_label = QLabel()
            logo_label.setPixmap(self.logo_pixmap.scaled(96, 96, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            logo_label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
            
            shadow = QGraphicsDropShadowEffect(self)
            shadow.setBlurRadius(25)
            shadow.setColor(QColor("#a0c4ff"))
            shadow.setOffset(0, 0)
            logo_label.setGraphicsEffect(shadow)
            header_layout.addWidget(logo_label)

        main_layout.addWidget(header_frame)
        
        self.tabs = QTabWidget()
        self.create_dorks_tab()
        self.create_results_tab()
        self.create_subdomains_tab()
        self.create_settings_tab()
        self.create_log_tab()
        main_layout.addWidget(self.tabs)
        
        control_group = QGroupBox("Scan Controls")
        control_layout = QHBoxLayout(control_group)
        self.start_btn = QPushButton("Start Scan")
        self.start_btn.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.start_btn.clicked.connect(self.start_scan)
        self.stop_btn = QPushButton("Stop Scan")
        self.stop_btn.setIcon(self.style().standardIcon(QStyle.SP_MediaStop))
        self.stop_btn.clicked.connect(self.stop_scan)
        self.stop_btn.setEnabled(False)
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximumWidth(300)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setToolTip("Progress of the dork scanning phase.")
        self.urls_label = QLabel("URLs: 0")
        self.domains_label = QLabel("Domains: 0")
        
        control_layout.addWidget(self.start_btn)
        control_layout.addWidget(self.stop_btn)
        control_layout.addStretch()
        control_layout.addWidget(self.urls_label)
        control_layout.addWidget(self.domains_label)
        control_layout.addWidget(self.progress_bar)
        main_layout.addWidget(control_group)

    def create_dorks_tab(self):
        dorks_tab = QWidget()
        self.tabs.addTab(dorks_tab, "Dork Generation")
        layout = QHBoxLayout(dorks_tab)
        
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        keywords_group = QGroupBox("Keywords")
        keywords_layout = QVBoxLayout(keywords_group)
        self.keywords_text = QTextEdit()
        self.keywords_text.setPlaceholderText("Enter keywords (one per line)...")
        keywords_layout.addWidget(self.keywords_text)
        left_layout.addWidget(keywords_group, 1)

        patterns_group = QGroupBox("Base Dork Patterns")
        patterns_layout = QVBoxLayout(patterns_group)
        self.patterns_text = QTextEdit()
        self.patterns_text.setText("\n".join(self.scanner.default_patterns))
        patterns_layout.addWidget(self.patterns_text)
        left_layout.addWidget(patterns_group, 1)

        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        self.generate_btn = QPushButton("Generate Dorks")
        self.generate_btn.setToolTip("Generates dorks from keywords. Uses Gemini for more if enabled in settings.")
        self.generate_btn.clicked.connect(self.generate_dorks)
        
        preview_group = QGroupBox("Generated Dorks Preview")
        preview_layout = QVBoxLayout(preview_group)
        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        self.preview_count_label = QLabel("0 dorks generated.")
        
        preview_layout.addWidget(self.preview_text)
        preview_layout.addWidget(self.preview_count_label)
        
        right_layout.addWidget(self.generate_btn)
        right_layout.addWidget(preview_group)

        layout.addWidget(left_panel, 1)
        layout.addWidget(right_panel, 2)

    def create_results_tab(self):
        results_tab = QWidget()
        self.tabs.addTab(results_tab, "Results")
        layout = QVBoxLayout(results_tab)
        splitter = QSplitter(Qt.Horizontal)
        
        urls_group = QGroupBox("Discovered URLs")
        urls_layout = QVBoxLayout(urls_group)
        self.urls_list = QTableWidget(0, 1)
        self.urls_list.setHorizontalHeaderLabels(["URL"])
        self.urls_list.horizontalHeader().setStretchLastSection(True)
        self.urls_list.setSelectionBehavior(QAbstractItemView.SelectRows)
        urls_layout.addWidget(self.urls_list)
        splitter.addWidget(urls_group)

        domains_group = QGroupBox("Discovered Domains")
        domains_layout = QVBoxLayout(domains_group)
        self.domains_list = QTableWidget(0, 1)
        self.domains_list.setHorizontalHeaderLabels(["Domain"])
        self.domains_list.horizontalHeader().setStretchLastSection(True)
        self.domains_list.setSelectionBehavior(QAbstractItemView.SelectRows)
        domains_layout.addWidget(self.domains_list)
        splitter.addWidget(domains_group)
        
        splitter.setSizes([600, 400])
        
        buttons_layout = QHBoxLayout()
        save_results_btn = QPushButton("Save Results")
        save_results_btn.clicked.connect(self.save_results_manual)
        clear_btn = QPushButton("Clear Results")
        clear_btn.clicked.connect(self.clear_results)
        buttons_layout.addWidget(save_results_btn)
        buttons_layout.addWidget(clear_btn)
        buttons_layout.addStretch()
        
        layout.addWidget(splitter)
        layout.addLayout(buttons_layout)
        
    def create_subdomains_tab(self):
        subdomains_tab = QWidget()
        self.tabs.addTab(subdomains_tab, "Subdomains")
        layout = QVBoxLayout(subdomains_tab)
        self.subdomains_list = QTableWidget(0, 3)
        self.subdomains_list.setHorizontalHeaderLabels(["Subdomain", "Title", "A Records"])
        header = self.subdomains_list.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        self.subdomains_list.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.subdomains_list)
        
        buttons_layout = QHBoxLayout()
        save_subdomains_btn = QPushButton("Save Subdomains")
        save_subdomains_btn.clicked.connect(self.save_subdomains_manual)
        clear_btn = QPushButton("Clear Subdomains")
        clear_btn.clicked.connect(lambda: self.subdomains_list.setRowCount(0))
        buttons_layout.addWidget(save_subdomains_btn)
        buttons_layout.addWidget(clear_btn)
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)

    def create_settings_tab(self):
        settings_tab = QWidget()
        self.tabs.addTab(settings_tab, "Settings")
        layout = QVBoxLayout(settings_tab)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        settings_widget = QWidget()
        settings_layout = QVBoxLayout(settings_widget)

        scan_group = QGroupBox("Scan Settings")
        scan_layout = QFormLayout(scan_group)
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(5, 60)
        self.timeout_spin.setSuffix(" s")
        self.workers_spin = QSpinBox()
        self.workers_spin.setRange(1, 20)
        self.debug_check = QCheckBox("Enable Debug Logging")
        self.subdomain_check = QCheckBox("Enable Live Subdomain Scanning")
        scan_layout.addRow("Network Timeout:", self.timeout_spin)
        scan_layout.addRow("Max Concurrent Workers:", self.workers_spin)
        scan_layout.addRow(self.debug_check)
        scan_layout.addRow(self.subdomain_check)
        settings_layout.addWidget(scan_group)

        gemini_group = QGroupBox("Gemini AI Settings")
        gemini_layout = QFormLayout(gemini_group)
        self.gemini_api_line = QLineEdit()
        self.gemini_api_line.setEchoMode(QLineEdit.Password)
        self.gemini_model_line = QLineEdit()
        self.ai_dork_check = QCheckBox("Use Gemini to generate additional dorks")
        gemini_layout.addRow("Gemini API Key:", self.gemini_api_line)
        gemini_layout.addRow("Gemini Model:", self.gemini_model_line)
        gemini_layout.addRow(self.ai_dork_check)
        settings_layout.addWidget(gemini_group)

        settings_layout.addStretch()
        save_btn = QPushButton("Save Settings")
        save_btn.clicked.connect(self.save_settings)
        settings_layout.addWidget(save_btn, 0, Qt.AlignRight)
        
        scroll_area.setWidget(settings_widget)
        layout.addWidget(scroll_area)

    def create_log_tab(self):
        log_tab = QWidget()
        self.tabs.addTab(log_tab, "Activity Log")
        layout = QVBoxLayout(log_tab)
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        
        clear_btn = QPushButton("Clear Log")
        clear_btn.clicked.connect(self.log_text.clear)
        
        layout.addWidget(self.log_text)
        layout.addWidget(clear_btn, 0, Qt.AlignRight)

    def apply_dark_theme(self):
        self.setStyleSheet("""
            QWidget { background-color: #1A202C; color: #E2E8F0; font-family: Segoe UI, sans-serif; }
            QMainWindow { border: 1px solid #4A5568; }
            QGroupBox { margin-top: 1ex; font-weight: bold; background: #2D3748; border: 1px solid #4A5568; border-radius: 6px; }
            QGroupBox::title { subcontrol-origin: margin; padding: 0 5px; }
            QLineEdit, QTextEdit, QSpinBox { background-color: #2D3748; border: 1px solid #4A5568; border-radius: 4px; padding: 5px; }
            QLineEdit:focus, QTextEdit:focus, QSpinBox:focus { border: 1px solid #4299E1; }
            QPushButton { background-color: #4A5568; border: none; border-radius: 4px; padding: 8px 16px; font-weight: bold; }
            QPushButton:hover { background-color: #718096; }
            QPushButton:pressed { background-color: #2D3748; }
            QTabWidget::pane { border-top: 1px solid #4A5568; margin-top: -1px;}
            QTabBar::tab { background: #1A202C; border: 1px solid #4A5568; border-bottom: none; padding: 8px 16px; }
            QTabBar::tab:selected { background: #2D3748; color: #FFFFFF; }
            QTableWidget { gridline-color: #4A5568; background-color: #2D3748; }
            QHeaderView::section { background-color: #4A5568; padding: 4px; border: 1px solid #2D3748; font-weight: bold;}
            QProgressBar { border-radius: 4px; text-align: center; color: #FFFFFF; font-weight: bold; }
            QProgressBar::chunk { background-color: #38A169; border-radius: 3px; }
            QScrollArea { border: none; }
        """)

    def load_settings(self):
        config = self.scanner.config
        self.timeout_spin.setValue(config.get('timeout', 10))
        self.workers_spin.setValue(config.get('max_workers', 4))
        self.debug_check.setChecked(config.get('debug_mode', True))
        self.subdomain_check.setChecked(config.get('subdomain_scan', True))
        
        self.gemini_api_line.setText(config.get('gemini_api_key', ''))
        self.gemini_model_line.setText(config.get('gemini_model', 'gemini-1.5-flash-latest'))
        self.ai_dork_check.setChecked(config.get('use_gemini_for_dorks', True))
        self.log_message("[INFO] Settings loaded.")

    def save_settings(self):
        config = self.scanner.config
        config['timeout'] = self.timeout_spin.value()
        config['max_workers'] = self.workers_spin.value()
        config['debug_mode'] = self.debug_check.isChecked()
        config['subdomain_scan'] = self.subdomain_check.isChecked()
        config['gemini_api_key'] = self.gemini_api_line.text()
        config['gemini_model'] = self.gemini_model_line.text()
        config['use_gemini_for_dorks'] = self.ai_dork_check.isChecked()
        
        try:
            with open("config.json", 'w') as f:
                json.dump(config, f, indent=4)
            self.log_message("[SUCCESS] Settings saved. New settings will be applied on the next scan.")
            self.scanner = WordPressScanner(config)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Could not save settings: {e}")

    def generate_dorks(self):
        keywords = [k.strip() for k in self.keywords_text.toPlainText().strip().split('\n') if k.strip()]
        patterns = [p.strip() for p in self.patterns_text.toPlainText().strip().split('\n') if p.strip()]
        if not keywords:
            QMessageBox.warning(self, "Input Needed", "Please enter at least one keyword.")
            return

        base_dorks = self.scanner.generate_dorks_from_keywords(keywords, patterns)
        self.preview_text.setText("\n".join(base_dorks))
        self.preview_count_label.setText(f"{len(base_dorks)} base dorks generated.")
        self.log_message(f"[INFO] Generated {len(base_dorks)} dorks from patterns.")

        if self.ai_dork_check.isChecked() and self.gemini_api_line.text():
            self.log_message("[INFO] Generating additional dorks with Gemini...")
            self.gemini_worker = GeminiDorkWorker(self.gemini_api_line.text(), self.gemini_model_line.text(), keywords, 50)
            self.gemini_worker.signals.log_message.connect(self.log_message)
            self.gemini_worker.signals.dorks_generated.connect(self.add_ai_dorks)
            self.gemini_worker.start()

    def add_ai_dorks(self, ai_dorks):
        if not ai_dorks:
            self.log_message("[WARN] Gemini did not return any dorks.")
            return
        
        self.log_message(f"[SUCCESS] Gemini generated {len(ai_dorks)} additional dorks.")
        current_dorks = set(self.scanner.dorks)
        current_dorks.update(ai_dorks)
        self.scanner.dorks = sorted(list(current_dorks))
        self.preview_text.setText("\n".join(self.scanner.dorks))
        self.preview_count_label.setText(f"{len(self.scanner.dorks)} total dorks generated.")

    def start_scan(self):
        self.scanner = WordPressScanner()
        
        if not self.scanner.dorks:
            self.generate_dorks()
            if not self.scanner.dorks:
                return
        
        self.worker = ScannerWorker(self.scanner)
        self.worker.signals.log_message.connect(self.log_message)
        self.worker.signals.log_messages.connect(self.add_log_messages_batch)
        self.worker.signals.results_found.connect(self.add_results_batch)
        self.worker.signals.subdomains_found.connect(self.add_subdomains_batch)
        self.worker.signals.scan_progress.connect(self.update_progress)
        self.worker.signals.scanning_stopped.connect(self.on_scan_stop)
        
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.worker.start()

    def stop_scan(self):
        if self.worker and self.worker.isRunning():
            self.log_message("[INFO] Stopping scan... Please wait.")
            self.worker.stop()
            self.stop_btn.setEnabled(False)

    def log_message(self, message: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.append(f"[{timestamp}] {message}")

    def add_log_messages_batch(self, messages: list):
        """Appends a batch of messages to the log text edit."""
        timestamped_messages = [f"[{datetime.now().strftime('%H:%M:%S')}] {msg}" for msg in messages]
        current_text = self.log_text.toPlainText()
        if len(current_text) > 50000:
            self.log_text.setPlainText(current_text[-40000:])

        self.log_text.append("\n".join(timestamped_messages))
        self.log_text.verticalScrollBar().setValue(self.log_text.verticalScrollBar().maximum())


    def add_results_batch(self, results: list):
        """Adds a batch of URL/domain results to the tables efficiently."""
        self.urls_list.setUpdatesEnabled(False)
        self.domains_list.setUpdatesEnabled(False)
        
        existing_domains = {self.domains_list.item(r, 0).text() for r in range(self.domains_list.rowCount())}
        
        for url, domain in results:
            self.add_item_to_table(self.urls_list, [url])
            if domain not in existing_domains:
                self.add_item_to_table(self.domains_list, [domain])
                existing_domains.add(domain)

        self.urls_list.setUpdatesEnabled(True)
        self.domains_list.setUpdatesEnabled(True)
        self.update_counts()

    def add_subdomains_batch(self, subdomains: list):
        """Adds a batch of subdomain results to the table."""
        self.subdomains_list.setUpdatesEnabled(False)
        for fqdn, domain, info in subdomains:
            self.add_item_to_table(self.subdomains_list, [
                fqdn,
                info.get('title', 'N/A'),
                ", ".join(info.get('A', []))
            ])
        self.subdomains_list.setUpdatesEnabled(True)
        self.update_counts()

    def update_progress(self, value: int, total: int):
        if total > 0:
            percent = int((value / total) * 100)
            self.progress_bar.setValue(percent)
            self.progress_bar.setFormat(f"{value} / {total}")
        else:
            self.progress_bar.setValue(0)
            self.progress_bar.setFormat("N/A")

    def on_scan_stop(self, reason: str):
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.log_message(f"[INFO] Scan finished: {reason}")
        self.progress_bar.setValue(100)
        self.progress_bar.setFormat("Completed")
        self.scanner.save_results()
        self.worker = None

    def add_item_to_table(self, table: QTableWidget, item_data: List[str]):
        row_position = table.rowCount()
        table.insertRow(row_position)
        for col, text in enumerate(item_data):
            table.setItem(row_position, col, QTableWidgetItem(text))

    def update_counts(self):
        self.urls_label.setText(f"URLs: {self.urls_list.rowCount()}")
        self.domains_label.setText(f"Domains: {self.domains_list.rowCount()}")
        
    def clear_results(self):
        self.urls_list.setRowCount(0)
        self.domains_list.setRowCount(0)
        if self.scanner:
            self.scanner.discovered_urls.clear()
            self.scanner.discovered_domains.clear()
        self.update_counts()
        self.log_message("[INFO] Cleared URL and Domain results.")

    def save_results_manual(self):
        """Manually save the current results to files."""
        try:
            os.makedirs("results", exist_ok=True)
            
            # Save URLs
            urls = []
            for row in range(self.urls_list.rowCount()):
                item = self.urls_list.item(row, 0)
                if item:
                    urls.append(item.text())
            
            with open(self.scanner.config['urls_file'], 'w') as f:
                for url in urls:
                    f.write(f"{url}\n")
            
            # Save Domains
            domains = []
            for row in range(self.domains_list.rowCount()):
                item = self.domains_list.item(row, 0)
                if item:
                    domains.append(item.text())
            
            with open(self.scanner.config['domains_file'], 'w') as f:
                for domain in domains:
                    f.write(f"{domain}\n")
            
            self.log_message(f"[SUCCESS] Results saved to {self.scanner.config['urls_file']} and {self.scanner.config['domains_file']}")
        except Exception as e:
            self.log_message(f"[ERROR] Failed to save results: {e}")
            QMessageBox.critical(self, "Error", f"Failed to save results: {e}")

    def save_subdomains_manual(self):
        """Manually save the current subdomains to file."""
        try:
            os.makedirs("results", exist_ok=True)
            
            # Save Subdomains
            subdomains = []
            for row in range(self.subdomains_list.rowCount()):
                subdomain_item = self.subdomains_list.item(row, 0)
                if subdomain_item:
                    subdomains.append(subdomain_item.text())
            
            with open(self.scanner.config['subdomains_file'], 'w') as f:
                for subdomain in subdomains:
                    f.write(f"{subdomain}\n")
            
            self.log_message(f"[SUCCESS] Subdomains saved to {self.scanner.config['subdomains_file']}")
        except Exception as e:
            self.log_message(f"[ERROR] Failed to save subdomains: {e}")
            QMessageBox.critical(self, "Error", f"Failed to save subdomains: {e}")

    def setup_context_menus(self):
        for table in [self.urls_list, self.domains_list, self.subdomains_list]:
            table.setContextMenuPolicy(Qt.CustomContextMenu)
            table.customContextMenuRequested.connect(lambda pos, t=table: self.show_context_menu(pos, t))

    def show_context_menu(self, position, table: QTableWidget):
        menu = QMenu()
        menu.setStyleSheet("QMenu { background-color: #2D3748; color: #E2E8F0; } QMenu::item:selected { background-color: #4A5568; }")
        
        selected_items = table.selectedItems()
        if not selected_items:
            return

        copy_action = menu.addAction("Copy")
        open_action = menu.addAction("Open in Browser")
        
        action = menu.exec_(table.viewport().mapToGlobal(position))
        
        if action == copy_action:
            QApplication.clipboard().setText(selected_items[0].text())
        elif action == open_action:
            item_text = selected_items[0].text()
            url = item_text if item_text.startswith("http") else f"http://{item_text}"
            webbrowser.open(url)

    def closeEvent(self, event):
        if self.worker and self.worker.isRunning():
            reply = QMessageBox.question(self, 'Scan in Progress',
                                           "A scan is currently running. Are you sure you want to exit?",
                                           QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.stop_scan()
                self.worker.wait(3000)
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()

def print_installation_instructions():
    print("\n" + "="*60)
    print("MASS WORDPRESS SCRAPER - INSTALLATION INSTRUCTIONS")
    print("="*60)
    
    print("\n1. INSTALL DEPENDENCIES:")
    print("   pip install ddgs aiodns aiohttp PyQt5 colorama google-generativeai")
    
    print("\n2. PLATFORM-SPECIFIC NOTES:")
    
    if platform.system() == "Windows":
        print("\n   WINDOWS USERS:")
        print("   - Make sure Python 3.8+ is installed")
        print("   - Run the script with: python WordpressGrabberD.py")
        print("   - If you encounter display issues, try running in Windows Terminal")
        
    elif platform.system() == "Linux":
        print("\n   LINUX USERS:")
        print("   - Install Python 3: sudo apt install python3 python3-pip")
        print("   - Install Qt dependencies: sudo apt install python3-pyqt5")
        print("   - Run the script with: python3 WordpressGrabberD.py")
        print("   - If using SSH, use X11 forwarding: ssh -X user@host")
    
    print("\n3. OPTIONAL: ADD A LOGO")
    print("   - Place a PNG image named 'logo.png' in the same directory")
    print("   - This will be used as the application icon")
    
    print("\n4. CONFIGURATION:")
    print("   - The tool will create a 'config.json' file on first run")
    print("   - Results will be saved in the 'results/' directory")
    
    print("\n5. GEMINI AI FEATURES:")
    print("   - Add your API key in Settings to enable AI-powered dork generation")
    print("   - Requires: pip install google-generativeai")
    
    print("\n6. ENHANCED SUBDOMAIN SCANNING:")
    print("   - Now uses multiple methods for comprehensive subdomain discovery")
    print("   - Includes expanded base seeds and WordPress-specific patterns")
    
    print("\n7. IMPROVED ERROR HANDLING:")
    print("   - Better handling of gzip responses and network issues")
    print("   - Reduced warning messages for empty responses")
    
    print("\n" + "="*60)
    print("READY TO RUN!")
    print("="*60)

if __name__ == '__main__':
    print_installation_instructions()
    
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
    
    app = QApplication(sys.argv)
    
    # --- Set Application-wide Icon ---
    logo_pixmap = QPixmap()
    if not os.path.exists("logo.png") or not logo_pixmap.load("logo.png"):
        print("[WARNING] logo.png not found or could not be loaded. The application will run without an icon.")
        logo_pixmap = None
    else:
        app.setWindowIcon(QIcon(logo_pixmap))
        
    window = WordPressScannerUI(logo_pixmap=logo_pixmap)
    window.show()
    sys.exit(app.exec_())
"""

def main():
    try:
        decoded_code = base64.b64decode(ENCRYPTED_CODE).decode('utf-8')
        exec(decoded_code, {"__name__": "__main__", "__builtins__": __builtins__})
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()