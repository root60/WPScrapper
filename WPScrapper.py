import base64
import sys

ENCRYPTED_CODE = """
#!/usr/bin/env python3
# Mass Wordpress Scrapper v2- Developed by RedHydra (enhanced)

import os
import sys
import json
import time
import asyncio
import threading
import traceback
import webbrowser
import re
import html
from collections import deque
from urllib.parse import urlparse, urljoin
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple, Set
import platform
import subprocess
import signal

# --- Dependency Check at Startup ---
try:
    import aiodns
    import aiohttp
    from ddgs import DDGS
    from colorama import init, Fore
    init(autoreset=True)
except ImportError:
    print("="*60)
    print("ERROR: Missing required libraries.")
    print("Please install them by running the following command:")
    print("\npip install ddgs aiodns aiohttp colorama\n")
    print("For the GUI, you also need PyQt5:")
    print("\npip install PyQt5\n")
    print("="*60)
    sys.exit(1)

# Fix for Linux environment variables when running as root (keeps original behavior)
if platform.system() == "Linux":
    # Set XDG_RUNTIME_DIR if not set
    if 'XDG_RUNTIME_DIR' not in os.environ:
        runtime_dir = '/tmp/runtime-root'
        os.environ['XDG_RUNTIME_DIR'] = runtime_dir
        try:
            os.makedirs(runtime_dir, exist_ok=True)
            os.chmod(runtime_dir, 0o700)
            print(f"[INFO] XDG_RUNTIME_DIR set to {runtime_dir}")
        except Exception as e:
            print(f"[WARNING] Could not set XDG_RUNTIME_DIR: {e}")

    # Set DISPLAY if not set
    if 'DISPLAY' not in os.environ:
        os.environ['DISPLAY'] = ':0'
        print("[INFO] DISPLAY set to :0")

    # Try to start a virtual display if needed (best-effort)
    try:
        if not os.environ.get('DISPLAY') or not os.path.exists('/tmp/.X11-unix/X0'):
            print("[INFO] Starting virtual display (Xvfb)...")
            subprocess.Popen(['Xvfb', ':0', '-screen', '0', '1280x1024x24', '-ac'],
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            time.sleep(2)  # Give Xvfb time to start
    except Exception as e:
        print(f"[WARNING] Could not start virtual display: {e}")

# Optional AI features
try:
    import google.generativeai as genai  # type: ignore
except Exception:
    genai = None

# Attempt to import PyQt5 for GUI. If not available, we'll offer a CLI fallback.
USE_GUI = True
try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                                 QGroupBox, QFormLayout, QLabel, QLineEdit, QPushButton,
                                 QTextEdit, QTabWidget, QTableWidget, QTableWidgetItem,
                                 QCheckBox, QSpinBox, QFileDialog, QMessageBox,
                                 QProgressBar, QScrollArea, QSplitter, QToolTip, QFrame,
                                 QSizePolicy, QHeaderView, QAbstractItemView, QStatusBar,
                                 QToolButton, QStyle, QMenu, QAction, QGraphicsDropShadowEffect)
    from PyQt5.QtCore import (QObject, pyqtSignal, QThread, QEventLoop, QTimer, Qt)
    from PyQt5.QtGui import (QFont, QPalette, QColor, QBrush, QLinearGradient, QIcon,
                             QCursor, QIntValidator, QDoubleValidator, QFontMetrics,
                             QKeySequence, QClipboard, QTextCursor, QPixmap)
except Exception:
    USE_GUI = False

# --------------------------- Utilities & Enhancements ---------------------------

class RateLimiter:
    """Async rate limiter using a deque and asyncio.Lock to avoid blocking the event loop."""
    def __init__(self, requests_per_period: int, period_seconds: float):
        self.requests_per_period = max(1, int(requests_per_period))
        self.period_seconds = float(period_seconds)
        self.request_timestamps = deque()
        self._lock = asyncio.Lock()

    async def wait(self) -> None:
        """Await until allowed to proceed under the configured rate."""
        async with self._lock:
            now = time.monotonic()
            # Remove stale timestamps
            while self.request_timestamps and (now - self.request_timestamps[0]) >= self.period_seconds:
                self.request_timestamps.popleft()

            if len(self.request_timestamps) >= self.requests_per_period:
                # compute wait time until first timestamp expires
                wait_time = self.period_seconds - (now - self.request_timestamps[0])
                if wait_time > 0:
                    await asyncio.sleep(wait_time)

            self.request_timestamps.append(time.monotonic())

# --------------------------- Subdomain / HTTP Helpers ---------------------------

class DnsClient:
    """Async DNS client with caching using aiodns."""
    def __init__(self, timeout: float = 2.0, max_concurrency: int = 500):
        self.resolver = aiodns.DNSResolver(timeout=timeout, tries=2)
        self.cache: Dict[str, Dict[str, Any]] = {}
        self.sem = asyncio.Semaphore(max_concurrency)

    async def resolve_all(self, fqdn: str) -> Dict[str, Any]:
        """Resolve A and CNAME records for an fqdn, with caching."""
        fqdn = fqdn.strip().lower()
        if not fqdn:
            return {"A": [], "CNAME": None}

        if fqdn in self.cache:
            return self.cache[fqdn]

        async with self.sem:
            try:
                a_records = await self.resolver.query(fqdn, "A")
            except Exception:
                a_records = []

            try:
                cname_record = await self.resolver.query(fqdn, "CNAME")
            except Exception:
                cname_record = None

            res = {
                "A": [getattr(r, 'host', str(r)) for r in a_records] if a_records else [],
                "CNAME": getattr(cname_record, 'cname', None) if cname_record else None
            }
            self.cache[fqdn] = res
            return res

class HttpClient:
    """Async HTTP client for probing WordPress sites."""
    def __init__(self, verify_tls: bool, max_conc: int = 150, timeout_seconds: float = 10.0):
        self.sem = asyncio.Semaphore(max_conc)
        self.timeout = aiohttp.ClientTimeout(total=timeout_seconds)
        ssl_param = True if verify_tls else False
        self.connector = aiohttp.TCPConnector(ssl=ssl_param, limit_per_host=20)
        self.session = aiohttp.ClientSession(timeout=self.timeout, trust_env=True, connector=self.connector)

    async def close(self):
        """Closes the underlying aiohttp session."""
        try:
            if self.session and not self.session.closed:
                await self.session.close()
        except Exception:
            pass

    async def probe_host(self, host: str) -> Optional[Dict[str, Any]]:
        """
        Probe a host using both https and http and determine if it's a WordPress site.
        """
        if not host:
            return None

        host = host.strip()
        for scheme in ("https", "http"):
            url = f"{scheme}://{host}"
            try:
                async with self.sem:
                    async with self.session.get(url, allow_redirects=True) as r:
                        if 200 <= r.status < 400:
                            body = await r.read()
                            final_url = str(r.url)
                            if self.is_wordpress_site(body, final_url):
                                return {"url": final_url, "title": self.extract_title(body)}
            except (aiohttp.ClientError, asyncio.TimeoutError):
                continue
            except Exception:
                continue
        return None

    @staticmethod
    def is_wordpress_site(body: bytes, url: str) -> bool:
        """Heuristic checks for WordPress indicators."""
        try:
            indicators = [b'wp-content', b'wp-includes', b'WordPress', b'wp-json']
            for indicator in indicators:
                if indicator in body:
                    return True
            for path in ['/wp-admin', '/wp-login.php', '/xmlrpc.php']:
                if path in url:
                    return True
            return False
        except Exception:
            return False

    @staticmethod
    def extract_title(body: bytes) -> str:
        """Extract HTML title from bytes content."""
        try:
            match = re.search(rb'<title>(.*?)</title>', body, re.I | re.S)
            if match:
                return html.unescape(match.group(1).decode('utf-8', 'ignore')).strip()
            return "No Title"
        except Exception:
            return "No Title"

# --------------------------- Site Scraper: Additional Scraping Methods ---------------------------

class SiteScraper:
    """
    Additional WordPress scraping methods that probe common WP endpoints.
    """
    COMMON_PLUGINS = ["akismet", "woocommerce", "yoast", "jetpack", "elementor", "contact-form-7"]
    COMMON_THEMES = ["twentytwentyone", "twentynineteen", "twentyseventeen", "twentysixteen"]
    COMMON_BACKUPS = ["backup.zip", "site.zip", "db.sql", "wp-config.php.bak", "wp-config.bak"]

    def __init__(self, session: aiohttp.ClientSession, semaphore: asyncio.Semaphore, base_url: str, timeout: int = 10):
        self.session = session
        self.sem = semaphore
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout

    async def _fetch(self, path: str, method: str = "GET", allow_redirects: bool = True) -> Tuple[int, bytes, str]:
        url = urljoin(self.base_url + '/', path.lstrip('/'))
        try:
            async with self.sem:
                async with self.session.request(method, url, allow_redirects=allow_redirects, timeout=self.timeout) as r:
                    data = await r.read()
                    return r.status, data, str(r.url)
        except (asyncio.TimeoutError, aiohttp.ClientError):
            return 0, b'', url
        except Exception:
            return 0, b'', url

    async def scan(self) -> Dict[str, Any]:
        result: Dict[str, Any] = {
            "wp_version": None, "endpoints": {}, "exposed_files": [],
            "authors": [], "plugins": [], "themes": []
        }
        status, body, final = await self._fetch("/")
        if status and body:
            ver = await self.detect_wp_version(body)
            if ver:
                result["wp_version"] = ver

        tasks = {
            "wp_json": self.check_wp_json(),
            "readme_license": self.check_readme_and_license(),
            "xmlrpc": self.check_xmlrpc(),
            "robots_sitemap": self.check_robots_sitemap(),
            "authors": self.enumerate_authors(),
            "plugins_themes": self.check_plugins_themes(),
            "backups": self.check_backup_files(),
        }
        results = await asyncio.gather(*tasks.values(), return_exceptions=True)
        res_map = dict(zip(tasks.keys(), results))

        if isinstance(res_map["wp_json"], dict): result["endpoints"]["wp-json"] = res_map["wp_json"]
        if isinstance(res_map["readme_license"], dict):
            rl = res_map["readme_license"]
            result["endpoints"]["readme"] = rl.get("readme")
            result["endpoints"]["license"] = rl.get("license")
            if rl.get("readme") and rl.get("readme") != "found" and not result["wp_version"]:
                result["wp_version"] = rl.get("readme")
        if isinstance(res_map["xmlrpc"], bool): result["endpoints"]["xmlrpc"] = res_map["xmlrpc"]
        if isinstance(res_map["robots_sitemap"], dict):
            rs = res_map["robots_sitemap"]
            result["endpoints"]["robots"] = rs.get("robots")
            if rs.get("sitemap"): result["endpoints"]["sitemap"] = rs.get("sitemap")
        if isinstance(res_map["authors"], list): result["authors"] = res_map["authors"]
        if isinstance(res_map["plugins_themes"], dict):
            pt = res_map["plugins_themes"]
            if pt.get("plugins"): result["plugins"] = pt["plugins"]
            if pt.get("themes"): result["themes"] = pt["themes"]
        if isinstance(res_map["backups"], list): result["exposed_files"].extend(res_map["backups"])

        return result

    async def detect_wp_version(self, html_bytes: bytes) -> Optional[str]:
        try:
            txt = html_bytes.decode('utf-8', errors='ignore')
            m = re.search(r'<meta name=["\']generator["\'] content=["\']WordPress\s*([0-9\.]+)', txt, re.I)
            return m.group(1) if m else None
        except Exception:
            return None

    async def check_wp_json(self) -> Optional[Dict[str, Any]]:
        status, body, final = await self._fetch("/wp-json/")
        if status and body:
            try:
                text = body.decode('utf-8', errors='ignore')
                if "namespaces" in text or '"routes"' in text:
                    try:
                        import json as _json
                        data = _json.loads(text)
                        return {"url": final, "parsed": True, "summary": {"namespaces": list(data.get("namespaces", []))[:5] if isinstance(data, dict) else []}}
                    except Exception:
                        return {"url": final, "parsed": False}
            except Exception:
                return {"url": final, "parsed": False}
        return None

    async def check_readme_and_license(self) -> Dict[str, Optional[str]]:
        result = {"readme": None, "license": None}
        s1, b1, u1 = await self._fetch("/readme.html")
        if s1 and b1:
            try:
                txt = b1.decode('utf-8', errors='ignore')
                m = re.search(r"Stable tag:\s*([0-9]+\.[0-9]+(?:\.[0-9]+)?)", txt, re.I)
                if not m:
                    m = re.search(r"Version\s*([0-9]+\.[0-9]+(?:\.[0-9]+)?)", txt, re.I)
                result["readme"] = m.group(1) if m else "found"
            except Exception:
                result["readme"] = "found"
        s2, b2, u2 = await self._fetch("/license.txt")
        if s2 and b2:
            result["license"] = "found"
        return result

    async def check_xmlrpc(self) -> bool:
        status, _, _ = await self._fetch("/xmlrpc.php", method="POST")
        return bool(status)

    async def check_robots_sitemap(self) -> Dict[str, Optional[str]]:
        info = {"robots": None, "sitemap": None}
        s, b, u = await self._fetch("/robots.txt")
        if s and b:
            try:
                txt = b.decode('utf-8', errors='ignore')
                if "Sitemap:" in txt:
                    m = re.search(r"Sitemap:\s*(\S+)", txt, re.I)
                    if m:
                        info["sitemap"] = m.group(1)
                info["robots"] = "found"
            except Exception:
                info["robots"] = "found"
        s2, b2, u2 = await self._fetch("/sitemap.xml")
        if s2 and b2:
            info["sitemap"] = u2
        return info

    async def enumerate_authors(self) -> List[str]:
        authors = []
        status, body, final = await self._fetch("/?author=1", allow_redirects=True)
        try:
            m = re.search(r'/author/([^/]+)/', final)
            if m:
                authors.append(m.group(1))
            else:
                txt = body.decode('utf-8', errors='ignore')
                m2 = re.search(r'/author/([^/]+)/', txt)
                if m2:
                    authors.append(m2.group(1))
        except Exception:
            pass
        return authors

    async def check_plugins_themes(self) -> Dict[str, List[str]]:
        discovered_plugins: List[str] = []
        discovered_themes: List[str] = []

        async def check_path(path, item_list, item_name):
            status, _, _ = await self._fetch(path, method="HEAD")
            if status and status < 400:
                item_list.append(item_name)
            else:
                status2, _, _ = await self._fetch(f"{path}readme.txt", method="GET")
                if status2 and status2 < 400:
                    item_list.append(item_name)

        tasks = []
        for p in self.COMMON_PLUGINS:
            tasks.append(check_path(f"/wp-content/plugins/{p}/", discovered_plugins, p))
        for t in self.COMMON_THEMES:
            tasks.append(check_path(f"/wp-content/themes/{t}/", discovered_themes, t))

        await asyncio.gather(*tasks)
        return {"plugins": discovered_plugins, "themes": discovered_themes}

    async def check_backup_files(self) -> List[str]:
        found = []
        tasks = []
        for fname in self.COMMON_BACKUPS:
            async def check_file(filename):
                status, _, u = await self._fetch(f"/{filename}", method="HEAD")
                if status and status < 400:
                    found.append(u)
            tasks.append(check_file(fname))
        await asyncio.gather(*tasks)
        return found

# --------------------------- Subdomain Scanner ---------------------------

class SubdomainScanner:
    """Scanner for discovering WordPress sites across subdomains using multiple methods."""
    def __init__(self, config: Dict[str, Any]):
        self.config = config or {}

    async def discover_wordpress_subdomains(self, domain: str, http_client: HttpClient, log_batch: list, lock: asyncio.Lock) -> Dict[str, Any]:
        """Finds subdomains using multiple methods and probes them for WordPress."""
        domain = domain.strip().lower()
        found_subdomains: Set[str] = set()

        # Method 1: crt.sh
        try:
            crt_url = f"https://crt.sh/?q=%.{domain}&output=json"
            async with http_client.session.get(crt_url, timeout=20) as response:
                if response.status == 200:
                    data = await response.json(content_type=None)
                    for entry in data:
                        name_value = entry.get('name_value', '')
                        subdomains = name_value.split('\n')
                        for sub in subdomains:
                            clean_sub = sub.strip().lower()
                            if clean_sub.endswith(f'.{domain}') and '*' not in clean_sub:
                                found_subdomains.add(clean_sub)
        except Exception as e:
            async with lock:
                log_batch.append(f"[Subdomain Scan] crt.sh query for {domain} failed: {repr(e)}. Using fallback seeds.")

        # Method 2: Enhanced Internal wordlist
        COMMON_SUBDOMAINS = {
            "www", "blog", "shop", "news", "store", "portal", "dev", "staging", "wp", "wordpress",
            "m", "mail", "webmail", "ftp", "cpanel", "webdisk", "autodiscover", "admin", "test",
            "demo", "secure", "support", "help", "my", "account", "login", "app", "api", "dashboard",
            "forum", "community", "events", "jobs", "careers", "press", "media", "gallery",
            "video", "docs", "developer", "status", "info", "cdn", "assets", "static", "img",
            "images", "download", "files", "beta", "alpha", "old", "new", "search", "stats",
            "analytics", "piwik", "matomo", "vpn", "remote", "git", "svn", "fileserver",
            "backup", "db", "mysql", "phpmyadmin", "sql", "ns1", "ns2", "ns3", "ns4", "dns",
            "www2", "legacy", "intranet", "wiki", "sso", "auth", "uat", "prod", "production",
            "client", "customer", "partner", "investors", "ir", "shop-dev", "staging-blog",
            "dev-api", "aws", "s3", "cloud", "mail2", "owa", "exchange"
        }
        for seed in COMMON_SUBDOMAINS:
            found_subdomains.add(f"{seed}.{domain}")

        async with lock:
            log_batch.append(f"[Subdomain Scan] Found {len(found_subdomains)} potential candidates for {domain}.")

        if not found_subdomains:
            return {}

        dns_client = DnsClient()
        tasks = [self.probe_fqdn(fqdn, dns_client, http_client) for fqdn in found_subdomains]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        discovered = {}
        for entry in results:
            if isinstance(entry, tuple) and entry[0]:
                fqdn, info = entry
                discovered[fqdn] = info

        async with lock:
            log_batch.append(f"[Subdomain Scan] Finished probe for '{domain}'. Identified {len(discovered)} WordPress sites.")

        return discovered

    async def probe_fqdn(self, fqdn: str, dns_client: DnsClient, http_client: HttpClient) -> Tuple[Optional[str], Optional[Dict]]:
        dns_info = await dns_client.resolve_all(fqdn)
        if dns_info and dns_info.get("A"):
            http_info = await http_client.probe_host(fqdn)
            if http_info:
                merged = dict(dns_info)
                merged.update(http_info)
                try:
                    scraper = SiteScraper(http_client.session, http_client.sem, merged.get("url", f"https://{fqdn}"))
                    scan_result = await asyncio.wait_for(scraper.scan(), timeout=60)
                    if isinstance(scan_result, dict):
                        merged["scrape"] = scan_result
                except Exception:
                    merged["scrape"] = {}
                return fqdn, merged
        return None, None

# --------------------------- Main Scanner Logic ---------------------------

class WordPressScanner:
    """Main WordPress scanner class that handles dork generation and scanning."""
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or self.load_default_config()
        self.rate_limiter = RateLimiter(requests_per_period=self.config.get('rate_limit', 10),
                                        period_seconds=self.config.get('rate_period', 3))
        self.gemini_seeder: Optional['GeminiSeeder'] = None
        if self.config.get('gemini_api_key'):
            self.gemini_seeder = GeminiSeeder(self.config.get('gemini_api_key', ''), self.config.get('gemini_model', 'gemini-1.5-flash-latest'))

        self.discovered_urls: List[str] = []
        self.discovered_domains: List[str] = []
        self.subdomain_results: Dict[str, Any] = {}

        self.default_patterns = [
            'inurl:wp-content "{keyword}"', 'inurl:wp-admin "{keyword}"',
            'inurl:wp-includes "{keyword}"', 'intitle:"WordPress" "{keyword}"',
            'intext:"powered by WordPress" "{keyword}"'
        ]
        self.dorks: List[str] = []

    def load_default_config(self) -> Dict[str, Any]:
        config_file = "config.json"
        default_config = {
            "timeout": 20, "max_workers": 50, "debug_mode": True,
            "urls_file": os.path.join("results", "urls.txt"),
            "domains_file": os.path.join("results", "domains.txt"),
            "subdomains_file": os.path.join("results", "subdomains.txt"),
            "subdomain_scan": True, "verify_tls": False, "gemini_api_key": "",
            "gemini_model": "gemini-1.5-flash-latest", "use_gemini_for_dorks": True,
            "rate_limit": 10, "rate_period": 3
        }
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                default_config.update(config)
            except (json.JSONDecodeError, IOError): pass

        try:
            os.makedirs("results", exist_ok=True)
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=4)
        except IOError: pass
        return default_config

    def generate_dorks_from_keywords(self, keywords: List[str], patterns: Optional[List[str]] = None) -> List[str]:
        patterns = patterns or self.default_patterns
        dorks = set()
        for keyword in keywords:
            if not keyword: continue
            for pattern in patterns:
                dorks.add(pattern.replace("{keyword}", keyword.strip()))
        self.dorks = sorted(list(dorks))
        return self.dorks


    def get_base_domain(self, url_str: str) -> str:
        try:
            parsed = urlparse(url_str)
            netloc = parsed.netloc or parsed.path
            if not netloc: return "unknown"
            parts = netloc.split(':')[0].split('.')
            return ".".join(parts[-2:]) if len(parts) >= 2 else netloc
        except Exception:
            return "unknown"

    def save_results(self):
        try:
            os.makedirs("results", exist_ok=True)
            results_data = {
                "urls": sorted(list(set(self.discovered_urls))),
                "domains": sorted(list(set(self.discovered_domains))),
                "subdomains": self.subdomain_results
            }
            with open(os.path.join("results", "scan_results.json"), 'w', encoding='utf-8') as f:
                json.dump(results_data, f, indent=4)

            for key, data_list in [("urls", self.discovered_urls), ("domains", self.discovered_domains)]:
                file_path = self.config.get(f'{key}_file', os.path.join("results", f"{key}.txt"))
                with open(file_path, 'w', encoding='utf-8') as f:
                    for item in sorted(list(set(data_list))): f.write(f"{item}\n")
        except IOError: pass


# --------------------------- PyQt5 Worker Signals & Threads ---------------------------

if USE_GUI:
    class WorkerSignals(QObject):
        log_message = pyqtSignal(str)
        log_messages = pyqtSignal(list)
        results_found = pyqtSignal(list)
        subdomains_found = pyqtSignal(list)
        scan_progress = pyqtSignal(int, int)
        scanning_stopped = pyqtSignal(str)
        dorks_generated = pyqtSignal(list)

    class ScannerWorker(QThread):
        def __init__(self, scanner: WordPressScanner):
            super().__init__()
            self.scanner = scanner
            self.signals = WorkerSignals()
            self._running = True

        def run(self):
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            try:
                self.loop.run_until_complete(self.main())
            except Exception:
                self.signals.log_message.emit(f"[ERROR] Scanner thread error: {traceback.format_exc()}")
            finally:
                self.signals.scanning_stopped.emit("Finished")

        async def main(self):
            domain_queue: asyncio.Queue = asyncio.Queue()
            queued_domains: Set[str] = set()
            log_batch: list = []; result_batch: list = []; subdomain_batch: list = []
            batch_lock = asyncio.Lock()
            stop_emitter = asyncio.Event()

            consumer = asyncio.create_task(self.subdomain_scan_consumer(domain_queue, subdomain_batch, log_batch, batch_lock))
            emitter = asyncio.create_task(self.batch_emitter(log_batch, result_batch, subdomain_batch, batch_lock, stop_emitter))

            dork_tasks = [self.process_dork(dork, domain_queue, queued_domains, result_batch, log_batch, batch_lock) for dork in self.scanner.dorks]

            if dork_tasks:
                self.signals.log_message.emit("[INFO] Starting concurrent scan...")
                await self.run_tasks_concurrently(dork_tasks)

            await domain_queue.put(None)
            await consumer
            stop_emitter.set()
            await emitter

        async def batch_emitter(self, log_batch, result_batch, subdomain_batch, lock, stop_event):
            try:
                while not stop_event.is_set():
                    await asyncio.sleep(1.0)
                    logs_to_emit, results_to_emit, subdomains_to_emit = [], [], []
                    async with lock:
                        if log_batch: logs_to_emit = log_batch[:]; log_batch.clear()
                        if result_batch: results_to_emit = result_batch[:]; result_batch.clear()
                        if subdomain_batch: subdomains_to_emit = subdomain_batch[:]; subdomain_batch.clear()

                    if logs_to_emit: self.signals.log_messages.emit(logs_to_emit)
                    if results_to_emit: self.signals.results_found.emit(results_to_emit)
                    if subdomains_to_emit: self.signals.subdomains_found.emit(subdomains_to_emit)
            except Exception as e:
                self.signals.log_message.emit(f"[ERROR] Batch emitter failed: {e}")

        async def subdomain_scan_consumer(self, domain_queue: asyncio.Queue, subdomain_batch: list, log_batch: list, lock: asyncio.Lock):
            http_client = HttpClient(self.scanner.config.get('verify_tls', False))
            try:
                while self._running:
                    try:
                        domain = await asyncio.wait_for(domain_queue.get(), timeout=1.0)
                        if domain is None: break

                        sub_scanner = SubdomainScanner(self.scanner.config)
                        results = await sub_scanner.discover_wordpress_subdomains(domain, http_client, log_batch, lock)

                        async with lock:
                            if self._running and results:
                                self.scanner.subdomain_results.update(results)
                                for fqdn, info in results.items():
                                    subdomain_batch.append((fqdn, domain, info))
                    except asyncio.TimeoutError:
                        continue
            finally:
                await http_client.close()

        async def run_tasks_concurrently(self, tasks: List[asyncio.Task]):
            semaphore = asyncio.Semaphore(self.scanner.config.get('max_workers', 50))
            total_tasks = len(tasks)
            self.signals.scan_progress.emit(0, total_tasks)

            async def run_with_semaphore(task_coro, idx):
                async with semaphore:
                    if not self._running: raise asyncio.CancelledError()
                    await task_coro
                    self.signals.scan_progress.emit(idx + 1, total_tasks)

            await asyncio.gather(*(run_with_semaphore(task, i) for i, task in enumerate(tasks)))

        async def process_dork(self, dork, domain_queue, queued_domains, result_batch, log_batch, lock):
            if not self._running: return
            await self.scanner.rate_limiter.wait()
            try:
                def search_ddg():
                    with DDGS(timeout=self.scanner.config.get('timeout', 20)) as ddgs:
                        # Fetch more results per dork
                        return [r.get('href') for r in ddgs.text(dork, max_results=100) if r.get('href')]

                links = await asyncio.to_thread(search_ddg)
                async with lock:
                    if not self._running: return
                    log_batch.append(f"[FETCH] '{dork}' returned {len(links)} URLs.")
                    for url in links:
                        if any(kw in url for kw in ["wp-content", "wp-includes", "wordpress", "wp-json"]):
                            if url not in self.scanner.discovered_urls:
                                self.scanner.discovered_urls.append(url)
                                base_domain = self.scanner.get_base_domain(url)
                                if base_domain not in self.scanner.discovered_domains:
                                    self.scanner.discovered_domains.append(base_domain)
                                result_batch.append((url, base_domain))
                                if self.scanner.config.get('subdomain_scan') and base_domain not in queued_domains:
                                    queued_domains.add(base_domain)
                                    await domain_queue.put(base_domain)
            except Exception as e:
                async with lock:
                    log_batch.append(f"[ERROR] Dork failed: '{dork}'. Reason: {e}")

        def stop(self):
            self._running = False

# --------------------------- GUI Implementation ---------------------------

if USE_GUI:
    class GeminiWorkerSignals(QObject):
        log_message = pyqtSignal(str)
        dorks_generated = pyqtSignal(list)

    class GeminiDorkWorker(QThread):
        """Worker thread to generate dorks using Gemini AI without blocking the GUI."""
        def __init__(self, api_key: str, model: str, keywords: List[str], max_dorks: int = 50):
            super().__init__()
            self.signals = GeminiWorkerSignals()
            self.api_key = api_key
            self.model = model
            self.keywords = keywords
            self.max_dorks = max_dorks
            self._running = True

        def run(self):
            if not genai:
                self.signals.log_message.emit("[ERROR] Gemini library (google.generativeai) is not installed.")
                return

            try:
                genai.configure(api_key=self.api_key)
                generation_config = genai.GenerationConfig(
                    temperature=0.7, top_p=1.0, top_k=40, max_output_tokens=2048,
                )
                model = genai.GenerativeModel(self.model, generation_config=generation_config)

                prompt = f"""
                You are a cybersecurity expert specializing in OSINT and search engine dorking.
                Your task is to generate a list of {self.max_dorks} unique and creative Google dorks to find WordPress websites related to the following keywords: {', '.join(self.keywords)}.
                Focus on discovering login pages, vulnerable plugins, exposed files, and misconfigurations.
                The dorks should use a variety of operators like inurl:, intitle:, intext:, filetype:, and site:.
                Combine them in interesting ways. Do not just repeat the same pattern for each keyword.
                Provide ONLY the dorks, one per line. Do not include any explanations, titles, or markdown formatting like ```.

                Example of good output format:
                intitle:"Index of /wp-content/plugins/" "elementor"
                inurl:/wp-config.txt "DB_PASSWORD"
                filetype:sql intext:wp_users "password"
                intext:"Powered by WordPress" intitle:"{self.keywords}"

                Now, generate the list.
                """

                if not self._running: return

                self.signals.log_message.emit("[INFO] Sending prompt to Gemini...")
                response = model.generate_content(prompt)

                if not self._running: return

                if response.parts:
                    ai_dorks = response.text.strip().split('\n')
                    cleaned_dorks = [d.strip() for d in ai_dorks if d.strip() and not d.startswith('```')]
                    if cleaned_dorks:
                        self.signals.dorks_generated.emit(cleaned_dorks)
                    else:
                        self.signals.log_message.emit("[WARN] Gemini responded, but no valid dorks were parsed.")
                else:
                    self.signals.log_message.emit("[WARN] Gemini returned an empty response.")

            except Exception as e:
                error_message = str(e).split('\n')[0] # Keep it concise
                self.signals.log_message.emit(f"[ERROR] Gemini request failed: {error_message}")

        def stop(self):
            self._running = False


    class WordPressScannerUI(QMainWindow):
        def __init__(self, logo_pixmap=None):
            super().__init__()
            self.setWindowTitle("Mass Wordpress Scrapper (v2) by RedHydra")
            self.logo_pixmap = logo_pixmap
            self.scanner = WordPressScanner()
            self.worker: Optional[ScannerWorker] = None
            self.gemini_worker: Optional[GeminiDorkWorker] = None
            self.create_ui()
            self.apply_dark_theme()
            self.load_settings()
            self.setup_context_menus()

        def create_ui(self):
            main_widget = QWidget()
            self.setCentralWidget(main_widget)
            main_layout = QVBoxLayout(main_widget)
            header_frame = QFrame()
            header_layout = QHBoxLayout(header_frame)
            header_text_layout = QVBoxLayout()
            title_label = QLabel("Mass Wordpress Scrapper")
            title_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #E2E8F0;")
            desc_label = QLabel("Advanced Discovery Tool for WordPress Sites")
            desc_label.setStyleSheet("font-size: 14px; color: #A0AEC0;")
            author_label = QLabel("Developed by RedHydra")
            author_label.setStyleSheet("font-size: 12px; color: #718096;")
            header_text_layout.addWidget(title_label)
            header_text_layout.addWidget(desc_label)
            header_text_layout.addWidget(author_label)
            header_layout.addLayout(header_text_layout)
            header_layout.addStretch()
            if self.logo_pixmap and not self.logo_pixmap.isNull():
                logo_label = QLabel()
                logo_label.setPixmap(self.logo_pixmap.scaled(96, 96, Qt.KeepAspectRatio, Qt.SmoothTransformation))
                header_layout.addWidget(logo_label)
            main_layout.addWidget(header_frame)
            self.tabs = QTabWidget()
            self.create_dorks_tab()
            self.create_results_tab()
            self.create_subdomains_tab()
            self.create_settings_tab()
            self.create_log_tab()
            main_layout.addWidget(self.tabs)
            control_group = QGroupBox("Scan Controls")
            control_layout = QHBoxLayout(control_group)
            self.start_btn = QPushButton("Start Scan")
            self.start_btn.clicked.connect(self.start_scan)
            self.stop_btn = QPushButton("Stop Scan")
            self.stop_btn.clicked.connect(self.stop_scan)
            self.stop_btn.setEnabled(False)
            self.progress_bar = QProgressBar()
            self.urls_label = QLabel("URLs: 0")
            self.domains_label = QLabel("Domains: 0")
            control_layout.addWidget(self.start_btn)
            control_layout.addWidget(self.stop_btn)
            control_layout.addStretch()
            control_layout.addWidget(self.urls_label)
            control_layout.addWidget(self.domains_label)
            control_layout.addWidget(self.progress_bar)
            main_layout.addWidget(control_group)

        def create_dorks_tab(self):
            dorks_tab = QWidget()
            self.tabs.addTab(dorks_tab, "Dork Generation")
            layout = QHBoxLayout(dorks_tab)
            left_panel = QWidget()
            left_layout = QVBoxLayout(left_panel)
            keywords_group = QGroupBox("Keywords")
            self.keywords_text = QTextEdit()
            self.keywords_text.setPlaceholderText("Enter keywords (one per line)...")
            keywords_layout = QVBoxLayout(keywords_group)
            keywords_layout.addWidget(self.keywords_text)
            left_layout.addWidget(keywords_group)
            patterns_group = QGroupBox("Base Dork Patterns")
            self.patterns_text = QTextEdit()
            self.patterns_text.setText("\n".join(self.scanner.default_patterns))
            patterns_layout = QVBoxLayout(patterns_group)
            patterns_layout.addWidget(self.patterns_text)
            left_layout.addWidget(patterns_group)
            right_panel = QWidget()
            right_layout = QVBoxLayout(right_panel)
            self.generate_btn = QPushButton("Generate Dorks")
            self.generate_btn.clicked.connect(self.generate_dorks)
            preview_group = QGroupBox("Generated Dorks Preview")
            self.preview_text = QTextEdit()
            self.preview_text.setReadOnly(True)
            self.preview_count_label = QLabel("0 dorks generated.")
            preview_layout = QVBoxLayout(preview_group)
            preview_layout.addWidget(self.preview_text)
            preview_layout.addWidget(self.preview_count_label)
            right_layout.addWidget(self.generate_btn)
            right_layout.addWidget(preview_group)
            layout.addWidget(left_panel, 1)
            layout.addWidget(right_panel, 2)

        def create_results_tab(self):
            results_tab = QWidget()
            self.tabs.addTab(results_tab, "Results")
            layout = QVBoxLayout(results_tab)
            splitter = QSplitter(Qt.Horizontal)
            urls_group = QGroupBox("Discovered URLs")
            urls_layout = QVBoxLayout(urls_group)
            self.urls_list = QTableWidget(0, 1)
            self.urls_list.setHorizontalHeaderLabels(["URL"])
            self.urls_list.horizontalHeader().setStretchLastSection(True)
            self.urls_list.setSelectionBehavior(QAbstractItemView.SelectRows)
            urls_layout.addWidget(self.urls_list)
            splitter.addWidget(urls_group)
            domains_group = QGroupBox("Discovered Domains")
            domains_layout = QVBoxLayout(domains_group)
            self.domains_list = QTableWidget(0, 1)
            self.domains_list.setHorizontalHeaderLabels(["Domain"])
            self.domains_list.horizontalHeader().setStretchLastSection(True)
            self.domains_list.setSelectionBehavior(QAbstractItemView.SelectRows)
            domains_layout.addWidget(self.domains_list)
            splitter.addWidget(domains_group)
            buttons_layout = QHBoxLayout()
            save_results_btn = QPushButton("Save Results")
            save_results_btn.clicked.connect(self.save_results_manual)
            clear_btn = QPushButton("Clear Results")
            clear_btn.clicked.connect(self.clear_results)
            buttons_layout.addWidget(save_results_btn)
            buttons_layout.addWidget(clear_btn)
            buttons_layout.addStretch()
            layout.addWidget(splitter)
            layout.addLayout(buttons_layout)

        def create_subdomains_tab(self):
            subdomains_tab = QWidget()
            self.tabs.addTab(subdomains_tab, "Subdomains")
            layout = QVBoxLayout(subdomains_tab)
            self.subdomains_list = QTableWidget(0, 6)
            self.subdomains_list.setHorizontalHeaderLabels(["Subdomain", "Title", "A Records", "WP Version", "Endpoints/Plugins", "Exposed Files/Authors"])
            header = self.subdomains_list.horizontalHeader()
            header.setSectionResizeMode(0, QHeaderView.Stretch)
            header.setSectionResizeMode(1, QHeaderView.Stretch)
            header.setSectionResizeMode(4, QHeaderView.Stretch)
            header.setSectionResizeMode(5, QHeaderView.Stretch)
            self.subdomains_list.setSelectionBehavior(QAbstractItemView.SelectRows)
            layout.addWidget(self.subdomains_list)
            buttons_layout = QHBoxLayout()
            save_subdomains_btn = QPushButton("Save Subdomains")
            save_subdomains_btn.clicked.connect(self.save_subdomains_manual)
            clear_btn = QPushButton("Clear Subdomains")
            clear_btn.clicked.connect(lambda: self.subdomains_list.setRowCount(0))
            buttons_layout.addWidget(save_subdomains_btn)
            buttons_layout.addWidget(clear_btn)
            buttons_layout.addStretch()
            layout.addLayout(buttons_layout)

        def create_settings_tab(self):
            settings_tab = QWidget()
            self.tabs.addTab(settings_tab, "Settings")
            layout = QVBoxLayout(settings_tab)
            scroll_area = QScrollArea()
            scroll_area.setWidgetResizable(True)
            settings_widget = QWidget()
            settings_layout = QVBoxLayout(settings_widget)
            scan_group = QGroupBox("Scan Settings")
            scan_layout = QFormLayout(scan_group)
            self.timeout_spin = QSpinBox()
            self.timeout_spin.setRange(5, 60)
            self.timeout_spin.setSuffix(" s")
            self.workers_spin = QSpinBox()
            self.workers_spin.setRange(1, 200) # Increased range
            self.debug_check = QCheckBox("Enable Debug Logging")
            self.subdomain_check = QCheckBox("Enable Live Subdomain Scanning")
            scan_layout.addRow("Network Timeout:", self.timeout_spin)
            scan_layout.addRow("Max Concurrent Workers:", self.workers_spin)
            scan_layout.addRow(self.debug_check)
            scan_layout.addRow(self.subdomain_check)
            settings_layout.addWidget(scan_group)
            gemini_group = QGroupBox("Gemini AI Settings")
            gemini_layout = QFormLayout(gemini_group)
            self.gemini_api_line = QLineEdit()
            self.gemini_api_line.setEchoMode(QLineEdit.Password)
            self.gemini_model_line = QLineEdit()
            self.ai_dork_check = QCheckBox("Use Gemini to generate additional dorks")
            gemini_layout.addRow("Gemini API Key:", self.gemini_api_line)
            gemini_layout.addRow("Gemini Model:", self.gemini_model_line)
            gemini_layout.addRow(self.ai_dork_check)
            settings_layout.addWidget(gemini_group)
            settings_layout.addStretch()
            save_btn = QPushButton("Save Settings")
            save_btn.clicked.connect(self.save_settings)
            settings_layout.addWidget(save_btn, 0, Qt.AlignRight)
            scroll_area.setWidget(settings_widget)
            layout.addWidget(scroll_area)

        def create_log_tab(self):
            log_tab = QWidget()
            self.tabs.addTab(log_tab, "Activity Log")
            layout = QVBoxLayout(log_tab)
            self.log_text = QTextEdit()
            self.log_text.setReadOnly(True)
            clear_btn = QPushButton("Clear Log")
            clear_btn.clicked.connect(self.log_text.clear)
            layout.addWidget(self.log_text)
            layout.addWidget(clear_btn, 0, Qt.AlignRight)

        def apply_dark_theme(self):
            self.setStyleSheet("""
                QWidget { background-color: #1A202C; color: #E2E8F0; font-family: Segoe UI, sans-serif; }
                QMainWindow { border: 1px solid #4A5568; }
                QGroupBox { margin-top: 1ex; font-weight: bold; background: #2D3748; border: 1px solid #4A5568; border-radius: 6px; }
                QGroupBox::title { subcontrol-origin: margin; padding: 0 5px; }
                QLineEdit, QTextEdit, QSpinBox { background-color: #2D3748; border: 1px solid #4A5568; border-radius: 4px; padding: 5px; }
                QLineEdit:focus, QTextEdit:focus, QSpinBox:focus { border: 1px solid #4299E1; }
                QPushButton { background-color: #4A5568; border: none; border-radius: 4px; padding: 8px 16px; font-weight: bold; }
                QPushButton:hover { background-color: #718096; }
                QPushButton:pressed { background-color: #2D3748; }
                QTabWidget::pane { border-top: 1px solid #4A5568; margin-top: -1px;}
                QTabBar::tab { background: #1A202C; border: 1px solid #4A5568; border-bottom: none; padding: 8px 16px; }
                QTabBar::tab:selected { background: #2D3748; color: #FFFFFF; }
                QTableWidget { gridline-color: #4A5568; background-color: #2D3748; }
                QHeaderView::section { background-color: #4A5568; padding: 4px; border: 1px solid #2D3748; font-weight: bold;}
                QProgressBar { border-radius: 4px; text-align: center; color: #FFFFFF; font-weight: bold; }
                QProgressBar::chunk { background-color: #38A169; border-radius: 3px; }
                QScrollArea { border: none; }
            """)

        def load_settings(self):
            config = self.scanner.config
            self.timeout_spin.setValue(config.get('timeout', 20))
            self.workers_spin.setValue(config.get('max_workers', 50))
            self.debug_check.setChecked(config.get('debug_mode', True))
            self.subdomain_check.setChecked(config.get('subdomain_scan', True))
            self.gemini_api_line.setText(config.get('gemini_api_key', ''))
            self.gemini_model_line.setText(config.get('gemini_model', 'gemini-1.5-flash-latest'))
            self.ai_dork_check.setChecked(config.get('use_gemini_for_dorks', True))
            self.log_message("[INFO] Settings loaded.")

        def save_settings(self):
            config = self.scanner.config
            config['timeout'] = self.timeout_spin.value()
            config['max_workers'] = self.workers_spin.value()
            config['debug_mode'] = self.debug_check.isChecked()
            config['subdomain_scan'] = self.subdomain_check.isChecked()
            config['gemini_api_key'] = self.gemini_api_line.text()
            config['gemini_model'] = self.gemini_model_line.text()
            config['use_gemini_for_dorks'] = self.ai_dork_check.isChecked()
            try:
                with open("config.json", 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=4)
                self.log_message("[SUCCESS] Settings saved.")
                self.scanner = WordPressScanner(config)
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Could not save settings: {e}")

        def generate_dorks(self):
            keywords = [k.strip() for k in self.keywords_text.toPlainText().strip().split('\n') if k.strip()]
            patterns = [p.strip() for p in self.patterns_text.toPlainText().strip().split('\n') if p.strip()]
            if not keywords:
                QMessageBox.warning(self, "Input Needed", "Please enter at least one keyword.")
                return

            base_dorks = self.scanner.generate_dorks_from_keywords(keywords, patterns)
            self.preview_text.setText("\n".join(base_dorks))
            self.preview_count_label.setText(f"{len(base_dorks)} base dorks generated.")
            self.log_message(f"[INFO] Generated {len(base_dorks)} dorks from patterns.")

            if self.ai_dork_check.isChecked() and self.gemini_api_line.text():
                self.log_message("[INFO] Generating additional dorks with Gemini...")
                self.gemini_worker = GeminiDorkWorker(self.gemini_api_line.text(), self.gemini_model_line.text(), keywords, 50)
                self.gemini_worker.signals.log_message.connect(self.log_message)
                self.gemini_worker.signals.dorks_generated.connect(self.add_ai_dorks)
                self.gemini_worker.start()

        def add_ai_dorks(self, ai_dorks):
            if not ai_dorks:
                self.log_message("[WARN] Gemini did not return any dorks.")
                return

            self.log_message(f"[SUCCESS] Gemini generated {len(ai_dorks)} additional dorks.")
            current_dorks = set(self.scanner.dorks)
            current_dorks.update(ai_dorks)
            self.scanner.dorks = sorted(list(current_dorks))
            self.preview_text.setText("\n".join(self.scanner.dorks))
            self.preview_count_label.setText(f"{len(self.scanner.dorks)} total dorks generated.")

        def start_scan(self):
            try:
                with open("config.json", 'r', encoding='utf-8') as f: cfg = json.load(f)
            except Exception: cfg = self.scanner.config
            self.scanner = WordPressScanner(cfg)
            if not self.scanner.dorks:
                self.generate_dorks()
                if not self.scanner.dorks:
                    QMessageBox.warning(self, "Cannot Start Scan", "Please generate dorks before starting.")
                    return
            self.worker = ScannerWorker(self.scanner)
            self.worker.signals.log_message.connect(self.log_message)
            self.worker.signals.log_messages.connect(self.add_log_messages_batch)
            self.worker.signals.results_found.connect(self.add_results_batch)
            self.worker.signals.subdomains_found.connect(self.add_subdomains_batch)
            self.worker.signals.scan_progress.connect(self.update_progress)
            self.worker.signals.scanning_stopped.connect(self.on_scan_stop)
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.worker.start()

        def stop_scan(self):
            if self.worker and self.worker.isRunning():
                self.log_message("[INFO] Stopping scan... Please wait.")
                self.worker.stop()
                self.stop_btn.setEnabled(False)

        def log_message(self, message: str):
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.log_text.append(f"[{timestamp}] {message}")

        def add_log_messages_batch(self, messages: list):
            timestamped_messages = [f"[{datetime.now().strftime('%H:%M:%S')}] {msg}" for msg in messages]
            self.log_text.append("\n".join(timestamped_messages))
            self.log_text.verticalScrollBar().setValue(self.log_text.verticalScrollBar().maximum())

        def add_results_batch(self, results: list):
            self.urls_list.setUpdatesEnabled(False)
            self.domains_list.setUpdatesEnabled(False)
            existing_domains = {self.domains_list.item(r, 0).text() for r in range(self.domains_list.rowCount()) if self.domains_list.item(r, 0)}
            for url, domain in results:
                self.add_item_to_table(self.urls_list, [url])
                if domain not in existing_domains:
                    self.add_item_to_table(self.domains_list, [domain])
                    existing_domains.add(domain)
            self.urls_list.setUpdatesEnabled(True)
            self.domains_list.setUpdatesEnabled(True)
            self.update_counts()

        def add_subdomains_batch(self, subdomains: list):
            self.subdomains_list.setUpdatesEnabled(False)
            for fqdn, domain, info in subdomains:
                scrape = info.get('scrape', {})
                wp_version = scrape.get('wp_version')
                endpoints = [k for k, v in scrape.get('endpoints', {}).items() if v]
                plugins = scrape.get('plugins', [])
                themes = scrape.get('themes', [])
                authors = scrape.get('authors', [])
                exposed = scrape.get('exposed_files', [])

                endpoints_plugins = []
                if endpoints: endpoints_plugins.append(",".join(endpoints))
                if plugins: endpoints_plugins.append("plugins:" + ",".join(plugins))
                if themes: endpoints_plugins.append("themes:" + ",".join(themes))

                exposed_authors = []
                if exposed: exposed_authors.append("files:" + ",".join(os.path.basename(p) for p in exposed))
                if authors: exposed_authors.append("authors:" + ",".join(authors))

                self.add_item_to_table(self.subdomains_list, [
                    fqdn, info.get('title', 'N/A'), ", ".join(info.get('A', [])),
                    wp_version or "", "; ".join(endpoints_plugins), "; ".join(exposed_authors)
                ])
            self.subdomains_list.setUpdatesEnabled(True)

        def update_progress(self, value, total):
            if total > 0:
                percent = int((value / total) * 100)
                self.progress_bar.setValue(percent)
                self.progress_bar.setFormat(f"{value} / {total}")

        def on_scan_stop(self, reason: str):
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.log_message(f"[INFO] Scan finished: {reason}")
            self.progress_bar.setValue(100)
            self.progress_bar.setFormat("Completed")
            self.scanner.save_results()
            self.worker = None

        def add_item_to_table(self, table, item_data):
            row = table.rowCount()
            table.insertRow(row)
            for col, text in enumerate(item_data):
                table.setItem(row, col, QTableWidgetItem(text))

        def update_counts(self):
            self.urls_label.setText(f"URLs: {self.urls_list.rowCount()}")
            self.domains_label.setText(f"Domains: {self.domains_list.rowCount()}")

        def clear_results(self):
            self.urls_list.setRowCount(0)
            self.domains_list.setRowCount(0)
            self.subdomains_list.setRowCount(0)
            if self.scanner:
                self.scanner.discovered_urls.clear()
                self.scanner.discovered_domains.clear()
                self.scanner.subdomain_results.clear()
            self.update_counts()
            self.log_message("[INFO] Cleared all results.")

        def save_results_manual(self):
            try:
                os.makedirs("results", exist_ok=True)
                urls = [self.urls_list.item(row, 0).text() for row in range(self.urls_list.rowCount())]
                with open(self.scanner.config['urls_file'], 'w', encoding='utf-8') as f:
                    f.write("\n".join(urls))
                domains = [self.domains_list.item(row, 0).text() for row in range(self.domains_list.rowCount())]
                with open(self.scanner.config['domains_file'], 'w', encoding='utf-8') as f:
                    f.write("\n".join(domains))
                self.log_message("[SUCCESS] URLs and Domains saved.")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to save results: {e}")

        def save_subdomains_manual(self):
            try:
                os.makedirs("results", exist_ok=True)
                subdomains = [self.subdomains_list.item(row, 0).text() for row in range(self.subdomains_list.rowCount())]
                with open(self.scanner.config['subdomains_file'], 'w', encoding='utf-8') as f:
                    f.write("\n".join(subdomains))
                self.log_message(f"[SUCCESS] Subdomains saved to {self.scanner.config['subdomains_file']}")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to save subdomains: {e}")

        def setup_context_menus(self):
            for table in [self.urls_list, self.domains_list, self.subdomains_list]:
                table.setContextMenuPolicy(Qt.CustomContextMenu)
                table.customContextMenuRequested.connect(lambda pos, t=table: self.show_context_menu(pos, t))

        def show_context_menu(self, position, table):
            menu = QMenu()
            menu.setStyleSheet("QMenu { background-color: #2D3748; color: #E2E8F0; } QMenu::item:selected { background-color: #4A5568; }")
            selected_items = table.selectedItems()
            if not selected_items: return
            copy_action = menu.addAction("Copy")
            open_action = menu.addAction("Open in Browser")
            action = menu.exec_(table.viewport().mapToGlobal(position))
            if action == copy_action:
                QApplication.clipboard().setText(selected_items[0].text())
            elif action == open_action:
                item_text = selected_items[0].text()
                url = item_text if item_text.startswith("http") else f"http://{item_text}"
                webbrowser.open(url)

        def closeEvent(self, event):
            if self.worker and self.worker.isRunning():
                reply = QMessageBox.question(self, 'Scan in Progress',
                                             "A scan is running. Are you sure you want to exit?",
                                             QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                if reply == QMessageBox.Yes:
                    self.stop_scan()
                    if self.worker: self.worker.wait(3000)
                    event.accept()
                else:
                    event.ignore()
            else:
                event.accept()

# --------------------------- CLI Fallback ---------------------------

async def run_simple_scan_from_cli(scanner: WordPressScanner, keywords: List[str]):
    """A very small CLI runner for quick scans without the GUI (best-effort)."""
    scanner.generate_dorks_from_keywords(keywords)
    print(f"[INFO] Generated {len(scanner.dorks)} dorks. Starting DuckDuckGo queries (sequential).")
    try:
        with DDGS(timeout=scanner.config.get('timeout', 15)) as ddgs:
            for dork in scanner.dorks:
                print(f"[FETCH] {dork}")
                try:
                    results_found = False
                    for r in ddgs.text(dork, max_results=15):
                        url = r.get('href')
                        if url and ("wp-content" in url or "wp-includes" in url or "wp-json" in url):
                            base_domain = scanner.get_base_domain(url)
                            if url not in scanner.discovered_urls:
                                scanner.discovered_urls.append(url)
                            if base_domain not in scanner.discovered_domains:
                                scanner.discovered_domains.append(base_domain)
                                print(f"{Fore.GREEN}[FOUND] {base_domain} via {url}")
                                results_found = True
                    if not results_found:
                        print(f"{Fore.YELLOW}[INFO] No WordPress URLs found for this dork.")
                except Exception as e:
                    print(f"{Fore.RED}[ERROR] Query failed for dork '{dork}': {e}")
    except Exception as e:
        print(f"{Fore.RED}[ERROR] DuckDuckGo client failed: {e}")

    scanner.save_results()
    print("[INFO] CLI scan completed.")


# --------------------------- Entrypoint ---------------------------

if __name__ == '__main__':
    if USE_GUI:
        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
        app = QApplication(sys.argv)

        logo_pixmap = QPixmap()
        logo_path = "logo.png"
        print(f"[INFO] Looking for logo at: {os.path.abspath(logo_path)}")

        if not os.path.exists(logo_path):
            print(f"[WARNING] '{logo_path}' not found. The application will run without a logo.")
            logo_pixmap = None
        elif not logo_pixmap.load(logo_path):
            print(f"[WARNING] Found '{logo_path}', but it could not be loaded. It might be corrupt or not a valid PNG.")
            logo_pixmap = None
        else:
            print(f"[SUCCESS] Logo '{logo_path}' loaded successfully.")

        window = WordPressScannerUI(logo_pixmap=logo_pixmap)
        if logo_pixmap:
            app.setWindowIcon(QIcon(logo_pixmap))

        window.show()
        sys.exit(app.exec_())
    else:
        print("[INFO] PyQt5 not available. Running in CLI mode.")
        scanner = WordPressScanner()
        print("Enter keywords (one per line, end with empty line):")
        lines = []
        try:
            while True:
                line = input()
                if not line.strip(): break
                lines.append(line.strip())
        except EOFError: pass
        if not lines: lines = ["wordpress", "blog", "wp plugin"]
        try:
            asyncio.run(run_simple_scan_from_cli(scanner, lines))
        except KeyboardInterrupt:
            print("\n[INFO] Scan interrupted. Saving results...")
            scanner.save_results()"""

def main():
    try:
        decoded_code = base64.b64decode(ENCRYPTED_CODE).decode('utf-8')
        exec(decoded_code, {"__name__": "__main__", "__builtins__": __builtins__})
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
